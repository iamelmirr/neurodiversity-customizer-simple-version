{"version":3,"file":"content.js","mappings":";;;;;;;;;;;;;;;AAAA;AACA;AAEA;AAAA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACjSA;;AAEA;AACA;AACA;AACA;AAAA;AAAA;;AAEA;AACA;;AAOA;AACA;AACA;AAAA;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AACA;;;;;;;;;;;;;;;AC5DA;AACA;AAEA;AAAA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;;AAMA;AACA;;AAMA;AACA;;AAMA;AACA;AAKA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;;;AC1NA;AACA;AAEA;AAAA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;;;ACzXA;AACA;AAEA;AAAA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAIA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACvWA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AASA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAoBA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;ACrPA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AAUA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAKA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAGA;AACA;AACA;;AAEA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAIA;AACA;AAIA;AACA;AAIA;AASA;AACA;AAYA;AASA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AAMA;AACA;AACA;;AAEA;AACA;AAAA;AACA;AAQA;AACA;;;;;;AC9OA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACNA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","sources":["webpack://neurodiversity-customizer/./src/content/modes/calm.js","webpack://neurodiversity-customizer/./src/content/modes/default.js","webpack://neurodiversity-customizer/./src/content/modes/dyslexia.js","webpack://neurodiversity-customizer/./src/content/modes/focus.js","webpack://neurodiversity-customizer/./src/content/modes/highContrast.js","webpack://neurodiversity-customizer/./src/content/utils/common.js","webpack://neurodiversity-customizer/./src/content/utils/themeDetection.js","webpack://neurodiversity-customizer/webpack/bootstrap","webpack://neurodiversity-customizer/webpack/runtime/define property getters","webpack://neurodiversity-customizer/webpack/runtime/hasOwnProperty shorthand","webpack://neurodiversity-customizer/webpack/runtime/make namespace object","webpack://neurodiversity-customizer/./src/content/index.js"],"sourcesContent":["// Calm/Low-Stimulation Mode (Autism-Friendly) implementation\r\nimport { createStyleElement, createDynamicContentObserver } from '../utils/common';\r\n\r\nexport function applyCalmMode() {\r\n  // Add a class to the body\r\n  document.body.classList.add('neuro-calm-mode');\r\n  \r\n  // Get website theme (dark or light) and site-specific settings\r\n  const websiteTheme = window.neuroCustomizerContext?.websiteTheme || 'light';\r\n  const siteSettings = window.neuroCustomizerContext?.siteSettings || {};\r\n  \r\n  // Create base styles for calm mode\r\n  const baseStyles = createBaseStyles(websiteTheme);\r\n  createStyleElement('neuro-calm-base', baseStyles, 'calm');\r\n  \r\n  // Apply site-specific fixes\r\n  if (siteSettings.isDynamic) {\r\n    if (window.location.hostname.includes('youtube.com')) {\r\n      applyYouTubeSpecificFixes(websiteTheme);\r\n    } else if (window.location.hostname.includes('google.com')) {\r\n      applyGoogleSpecificFixes(websiteTheme);\r\n    }\r\n    \r\n    // Create observer for dynamic content\r\n    createDynamicContentObserver(() => {\r\n      removeAnimationsFromNewElements();\r\n    });\r\n  }\r\n  \r\n  // Store original styles for elements we'll modify\r\n  storeOriginalStyles();\r\n  \r\n  console.log('Improved Calm/low-stimulation mode applied with', websiteTheme, 'theme');\r\n}\r\n\r\nfunction createBaseStyles(websiteTheme) {\r\n  // Choose color palette based on website theme\r\n  const colors = websiteTheme === 'dark' \r\n    ? {\r\n        background: '#2A2A33',\r\n        text: '#E0E0E6',\r\n        surface: '#353542',\r\n        accent: '#8A85FF',\r\n        links: '#B4B1FF',\r\n        borders: '#454552'\r\n      }\r\n    : {\r\n        background: '#F0F3F6', \r\n        text: '#404040',\r\n        surface: '#FFFFFF',\r\n        accent: '#6366F1',\r\n        links: '#5155E5',\r\n        borders: '#D1D5DB'\r\n      };\r\n  \r\n  // Build CSS with concatenation to avoid template literal issues\r\n  let css = '';\r\n  \r\n  // Soft color palette\r\n  css += 'body.neuro-calm-mode {\\n';\r\n  css += '  background-color: ' + colors.background + ' !important;\\n';\r\n  css += '  color: ' + colors.text + ' !important;\\n';\r\n  css += '  filter: saturate(85%) !important;\\n';\r\n  css += '  transition: none !important;\\n';\r\n  css += '}\\n\\n';\r\n  \r\n  // Apply softer colors to all elements\r\n  css += 'body.neuro-calm-mode * {\\n';\r\n  css += '  animation: none !important;\\n';\r\n  css += '  transition: none !important;\\n';\r\n  css += '}\\n\\n';\r\n  \r\n  // Muted text\r\n  css += 'body.neuro-calm-mode h1,\\n';\r\n  css += 'body.neuro-calm-mode h2,\\n';\r\n  css += 'body.neuro-calm-mode h3,\\n';\r\n  css += 'body.neuro-calm-mode h4,\\n';\r\n  css += 'body.neuro-calm-mode h5,\\n';\r\n  css += 'body.neuro-calm-mode h6,\\n';\r\n  css += 'body.neuro-calm-mode p,\\n';\r\n  css += 'body.neuro-calm-mode li,\\n';\r\n  css += 'body.neuro-calm-mode span {\\n';\r\n  css += '  color: ' + colors.text + ' !important;\\n';\r\n  css += '  font-weight: normal !important;\\n';\r\n  css += '  text-shadow: none !important;\\n';\r\n  css += '}\\n\\n';\r\n  \r\n  // Soften backgrounds but preserve structure\r\n  css += 'body.neuro-calm-mode div,\\n';\r\n  css += 'body.neuro-calm-mode section,\\n';\r\n  css += 'body.neuro-calm-mode article,\\n';\r\n  css += 'body.neuro-calm-mode aside,\\n';\r\n  css += 'body.neuro-calm-mode nav {\\n';\r\n  css += '  background-image: none !important;\\n';\r\n  css += '  box-shadow: none !important;\\n';\r\n  css += '}\\n\\n';\r\n  \r\n  // Reduce busy backgrounds without destroying layouts\r\n  css += 'body.neuro-calm-mode [style*=\"background-image\"]:not(img):not([role=\"img\"]) {\\n';\r\n  css += '  background-image: none !important;\\n';\r\n  css += '  background-color: ' + colors.surface + ' !important;\\n';\r\n  css += '}\\n\\n';\r\n  css += '  background-color: ' + colors.surface + ' !important;\\n';\r\n  css += '}\\n\\n';\r\n  \r\n  // Reduce color intensity of images but preserve them\r\n  css += 'body.neuro-calm-mode img,\\n';\r\n  css += 'body.neuro-calm-mode video,\\n';\r\n  css += 'body.neuro-calm-mode canvas,\\n';\r\n  css += 'body.neuro-calm-mode svg,\\n';\r\n  css += 'body.neuro-calm-mode [role=\"img\"] {\\n';\r\n  css += '  filter: saturate(70%) brightness(0.95) !important;\\n';\r\n  css += '}\\n\\n';\r\n  \r\n  // Soften borders\r\n  css += 'body.neuro-calm-mode * {\\n';\r\n  css += '  border-color: ' + colors.borders + ' !important;\\n';\r\n  css += '}\\n\\n';\r\n  \r\n  // Make links less vibrant but still visible\r\n  css += 'body.neuro-calm-mode a:link,\\n';\r\n  css += 'body.neuro-calm-mode a:visited {\\n';\r\n  css += '  color: ' + colors.links + ' !important;\\n';\r\n  css += '  text-decoration: none !important;\\n';\r\n  css += '  border-bottom: 1px solid ' + colors.links + ' !important;\\n';\r\n  css += '}\\n\\n';\r\n  \r\n  // Reduce button intensity\r\n  css += 'body.neuro-calm-mode button,\\n';\r\n  css += 'body.neuro-calm-mode input[type=\"button\"],\\n';\r\n  css += 'body.neuro-calm-mode input[type=\"submit\"] {\\n';\r\n  css += '  background-color: ' + colors.surface + ' !important;\\n';\r\n  css += '  color: ' + colors.text + ' !important;\\n';\r\n  css += '  border: 1px solid ' + colors.borders + ' !important;\\n';\r\n  css += '  box-shadow: none !important;\\n';\r\n  css += '}\\n\\n';\r\n  \r\n  // Improve focus\r\n  css += 'body.neuro-calm-mode *:focus {\\n';\r\n  css += '  outline: 2px solid ' + colors.accent + ' !important;\\n';\r\n  css += '  outline-offset: 2px !important;\\n';\r\n  css += '}\\n';\r\n  \r\n  // Soften links and buttons\r\n  css += 'body.neuro-calm-mode a {\\n';\r\n  css += '  color: ' + colors.links + ' !important;\\n';\r\n  css += '  text-decoration: underline !important;\\n';\r\n  css += '  font-weight: normal !important;\\n';\r\n  css += '  text-shadow: none !important;\\n';\r\n  css += '}\\n\\n';\r\n  \r\n  css += 'body.neuro-calm-mode button,\\n';\r\n  css += 'body.neuro-calm-mode input[type=\"button\"],\\n';\r\n  css += 'body.neuro-calm-mode input[type=\"submit\"] {\\n';\r\n  css += '  background-color: ' + colors.surface + ' !important;\\n';\r\n  css += '  color: ' + colors.text + ' !important;\\n';\r\n  css += '  border: 1px solid ' + colors.borders + ' !important;\\n';\r\n  css += '  box-shadow: none !important;\\n';\r\n  css += '  text-shadow: none !important;\\n';\r\n  css += '}\\n\\n';\r\n  \r\n  // Soften input fields\r\n  css += 'body.neuro-calm-mode input[type=\"text\"],\\n';\r\n  css += 'body.neuro-calm-mode input[type=\"email\"],\\n';\r\n  css += 'body.neuro-calm-mode input[type=\"password\"],\\n';\r\n  css += 'body.neuro-calm-mode input[type=\"search\"],\\n';\r\n  css += 'body.neuro-calm-mode textarea,\\n';\r\n  css += 'body.neuro-calm-mode select {\\n';\r\n  css += '  background-color: ' + colors.surface + ' !important;\\n';\r\n  css += '  color: ' + colors.text + ' !important;\\n';\r\n  css += '  border: 1px solid ' + colors.borders + ' !important;\\n';\r\n  css += '  box-shadow: none !important;\\n';\r\n  css += '}\\n\\n';\r\n  \r\n  // Preserve images but reduce their intensity\r\n  css += 'body.neuro-calm-mode img,\\n';\r\n  css += 'body.neuro-calm-mode svg,\\n';\r\n  css += 'body.neuro-calm-mode video,\\n';\r\n  css += 'body.neuro-calm-mode canvas,\\n';\r\n  css += 'body.neuro-calm-mode [role=\"img\"] {\\n';\r\n  css += '  filter: saturate(80%) contrast(90%) !important;\\n';\r\n  css += '  opacity: 0.9 !important;\\n';\r\n  css += '}\\n\\n';\r\n  \r\n  // Tone down borders\r\n  css += 'body.neuro-calm-mode *:not(img) {\\n';\r\n  css += '  border-color: ' + colors.borders + ' !important;\\n';\r\n  css += '}\\n\\n';\r\n  \r\n  // Remove blinking elements and animations\r\n  css += 'body.neuro-calm-mode *:not(input):not(textarea) {\\n';\r\n  css += '  animation: none !important;\\n';\r\n  css += '  transition: none !important;\\n';\r\n  css += '}\\n\\n';\r\n  \r\n  // Fix elements that need a background color\r\n  css += 'body.neuro-calm-mode header,\\n';\r\n  css += 'body.neuro-calm-mode footer,\\n';\r\n  css += 'body.neuro-calm-mode aside,\\n';\r\n  css += 'body.neuro-calm-mode nav,\\n';\r\n  css += 'body.neuro-calm-mode .header,\\n';\r\n  css += 'body.neuro-calm-mode .footer,\\n';\r\n  css += 'body.neuro-calm-mode .sidebar,\\n';\r\n  css += 'body.neuro-calm-mode [role=\"banner\"],\\n';\r\n  css += 'body.neuro-calm-mode [role=\"navigation\"] {\\n';\r\n  css += '  background-color: ' + colors.surface + ' !important;\\n';\r\n  css += '}\\n\\n';\r\n  \r\n  return css;\r\n}\r\n\r\nfunction applyYouTubeSpecificFixes(websiteTheme) {\r\n  const colors = websiteTheme === 'dark' \r\n    ? {\r\n        ytBackground: '#212121',\r\n        ytSurface: '#303030',\r\n        ytText: '#FFFFFF',\r\n        ytBorders: '#444444'\r\n      }\r\n    : {\r\n        ytBackground: '#FFFFFF',\r\n        ytSurface: '#F9F9F9',\r\n        ytText: '#0F0F0F',\r\n        ytBorders: '#E5E5E5'\r\n      };\r\n  \r\n  let ytFixCss = '';\r\n  \r\n  // Fix YouTube sidebar and header\r\n  ytFixCss += 'body.neuro-calm-mode ytd-app {\\n';\r\n  ytFixCss += '  background-color: ' + colors.ytBackground + ' !important;\\n';\r\n  ytFixCss += '}\\n\\n';\r\n  \r\n  // Keep the sidebar visible and properly styled\r\n  ytFixCss += 'body.neuro-calm-mode ytd-guide-renderer,\\n';\r\n  ytFixCss += 'body.neuro-calm-mode tp-yt-app-drawer {\\n';\r\n  ytFixCss += '  background-color: ' + colors.ytSurface + ' !important;\\n';\r\n  ytFixCss += '  display: block !important;\\n';\r\n  ytFixCss += '  visibility: visible !important;\\n';\r\n  ytFixCss += '}\\n\\n';\r\n  \r\n  // Fix YouTube video player\r\n  ytFixCss += 'body.neuro-calm-mode .html5-video-player {\\n';\r\n  ytFixCss += '  filter: saturate(90%) !important;\\n';\r\n  ytFixCss += '}\\n\\n';\r\n  \r\n  // Fix video thumbnails\r\n  ytFixCss += 'body.neuro-calm-mode ytd-thumbnail {\\n';\r\n  ytFixCss += '  opacity: 0.9 !important;\\n';\r\n  ytFixCss += '}\\n\\n';\r\n  \r\n  // Apply YouTube-specific styles\r\n  createStyleElement('neuro-calm-youtube', ytFixCss, 'calm');\r\n}\r\n\r\nfunction applyGoogleSpecificFixes(websiteTheme) {\r\n  let googleFixCss = '';\r\n  \r\n  // Fix Google search box\r\n  googleFixCss += 'body.neuro-calm-mode .gLFyf {\\n';\r\n  googleFixCss += '  background-color: inherit !important;\\n';\r\n  googleFixCss += '  border: 1px solid currentColor !important;\\n';\r\n  googleFixCss += '}\\n\\n';\r\n  \r\n  // Apply Google-specific styles\r\n  createStyleElement('neuro-calm-google', googleFixCss, 'calm');\r\n}\r\n\r\nfunction storeOriginalStyles() {\r\n  // Store original background-color, color, and transition styles\r\n  const elements = document.querySelectorAll('body, body *');\r\n  elements.forEach(element => {\r\n    const style = window.getComputedStyle(element);\r\n    if (!element.hasAttribute('data-neuro-original-bg')) {\r\n      element.setAttribute('data-neuro-original-bg', style.backgroundColor);\r\n    }\r\n    if (!element.hasAttribute('data-neuro-original-color')) {\r\n      element.setAttribute('data-neuro-original-color', style.color);\r\n    }\r\n  });\r\n}\r\n\r\nfunction removeAnimationsFromNewElements() {\r\n  const newElements = document.querySelectorAll('body *:not([data-neuro-processed])');\r\n  newElements.forEach(element => {\r\n    element.style.animation = 'none';\r\n    element.style.transition = 'none';\r\n    element.setAttribute('data-neuro-processed', 'true');\r\n  });\r\n}\r\n","// Default mode implementation - resets to original page styles\r\n\r\nexport function resetToDefaultMode() {\r\n  // Remove any style elements we've added\r\n  const customStyles = document.querySelectorAll('style[data-neuro-customizer]');\r\n  customStyles.forEach(style => style.remove());\r\n  \r\n  // Remove any classes we've added to the body\r\n  document.body.classList.remove(\r\n    'neuro-dyslexia-mode',\r\n    'neuro-focus-mode',\r\n    'neuro-high-contrast-mode',\r\n    'neuro-calm-mode'\r\n  );\r\n  \r\n  // Remove any observer or event listeners we've added\r\n  if (window.neuroCustomizerObservers) {\r\n    window.neuroCustomizerObservers.forEach(observer => observer.disconnect());\r\n    window.neuroCustomizerObservers = [];\r\n  }\r\n  \r\n  // Remove any custom elements we've added (buttons, tooltips, etc.)\r\n  if (window.neuroCustomizerElements) {\r\n    window.neuroCustomizerElements.forEach(element => {\r\n      if (element && element.parentNode) {\r\n        element.remove();\r\n      }\r\n    });\r\n    window.neuroCustomizerElements = [];\r\n  }\r\n  \r\n  // Remove any inline styles we've added\r\n  const elementsWithInlineStyles = document.querySelectorAll('[data-neuro-original-style]');\r\n  elementsWithInlineStyles.forEach(element => {\r\n    const originalStyle = element.getAttribute('data-neuro-original-style');\r\n    element.setAttribute('style', originalStyle || '');\r\n    element.removeAttribute('data-neuro-original-style');\r\n  });\r\n  \r\n  // Remove specific UI elements by ID\r\n  const elementsToRemove = [\r\n    'neuro-reading-ruler',\r\n    'neuro-keyboard-hint',\r\n    'neuro-high-contrast-toggle',\r\n    'neuro-high-contrast-yellow-mode',\r\n    'neuro-focus-highlight'\r\n  ];\r\n  \r\n  elementsToRemove.forEach(id => {\r\n    const element = document.getElementById(id);\r\n    if (element) {\r\n      element.remove();\r\n    }\r\n  });\r\n  \r\n  // Also remove any elements with data-neuro-customizer attribute\r\n  const customElements = document.querySelectorAll('[data-neuro-customizer]');\r\n  customElements.forEach(element => element.remove());\r\n  \r\n  console.log('Reset to default mode complete');\r\n}\r\n","// Dyslexia-friendly mode implementation\r\nimport { createStyleElement, loadFont, createDynamicContentObserver } from '../utils/common';\r\n\r\nexport function applyDyslexiaMode() {\r\n  // Add a class to the body for potential CSS selectors\r\n  document.body.classList.add('neuro-dyslexia-mode');\r\n  \r\n  // Get website theme (dark or light) and site-specific settings\r\n  const websiteTheme = window.neuroCustomizerContext?.websiteTheme || 'light';\r\n  const siteSettings = window.neuroCustomizerContext?.siteSettings || {};\r\n  \r\n  // Load custom fonts with reliable fallbacks\r\n  loadDyslexiaFriendlyFonts();\r\n  \r\n  // Apply base dyslexia styles\r\n  const baseStyles = createBaseDyslexiaStyles(websiteTheme);\r\n  createStyleElement('neuro-dyslexia-base', baseStyles, 'dyslexia');\r\n  \r\n  // Apply site-specific fixes if needed\r\n  if (siteSettings.isDynamic) {\r\n    if (window.location.hostname.includes('youtube.com')) {\r\n      applyYouTubeSpecificFixes(websiteTheme);\r\n    }\r\n    \r\n    // Create observer for dynamic content\r\n    createDynamicContentObserver(() => {\r\n      // Reapply font to dynamically added content\r\n      const dynStyles = 'body.neuro-dyslexia-mode * {\\n' +\r\n        '  font-family: \\'OpenDyslexic\\', \\'Lexend\\', \\'Comic Neue\\', \\'Comic Sans MS\\', \\'Arial\\', sans-serif !important;\\n' +\r\n        '}\\n';\r\n      createStyleElement('neuro-dyslexia-dynamic', dynStyles, 'dyslexia');\r\n    });\r\n  }\r\n  \r\n  console.log('Improved Dyslexia-friendly mode applied with', websiteTheme, 'theme');\r\n}\r\n\r\nfunction loadDyslexiaFriendlyFonts() {\r\n  // Load OpenDyslexic font (primary)\r\n  loadFont(\r\n    'OpenDyslexic',\r\n    'https://cdn.jsdelivr.net/npm/open-dyslexic@1.0.3/open-dyslexic-regular.woff2',\r\n    'woff2'\r\n  );\r\n  \r\n  // Load OpenDyslexic Bold\r\n  loadFont(\r\n    'OpenDyslexicBold',\r\n    'https://cdn.jsdelivr.net/npm/open-dyslexic@1.0.3/open-dyslexic-bold.woff2',\r\n    'woff2'\r\n  );\r\n  \r\n  // Load Lexend as a backup (better than default system fallbacks)\r\n  loadFont(\r\n    'Lexend',\r\n    'https://fonts.googleapis.com/css2?family=Lexend:wght@400;700&display=swap',\r\n    'stylesheet'\r\n  );\r\n  \r\n  // Load Comic Neue as another alternative\r\n  loadFont(\r\n    'ComicNeue',\r\n    'https://fonts.googleapis.com/css2?family=Comic+Neue:wght@400;700&display=swap',\r\n    'stylesheet'\r\n  );\r\n}\r\n\r\nfunction createBaseDyslexiaStyles(websiteTheme) {\r\n  // Define color palette based on theme\r\n  const colors = websiteTheme === 'dark'\r\n    ? {\r\n        background: '#222222',\r\n        text: '#F2F2F2',\r\n        textBackground: 'rgba(50, 50, 50, 0.7)',\r\n        links: '#92B4F4',\r\n        headers: '#C4C9F4'\r\n      }\r\n    : {\r\n        background: '#F8F9FA',\r\n        text: '#333333',\r\n        textBackground: 'rgba(255, 255, 255, 0.8)',\r\n        links: '#0066CC',\r\n        headers: '#3F51B5'\r\n      };\r\n    \r\n  // Build CSS with concatenation instead of template literals\r\n  let css = '';\r\n  \r\n  // OpenDyslexic font definitions\r\n  css += '/* OpenDyslexic font definitions with multiple formats for better browser support */\\n';\r\n  css += '@font-face {\\n';\r\n  css += '  font-family: \\'OpenDyslexic\\';\\n';\r\n  css += '  src: url(\\'https://cdn.jsdelivr.net/npm/open-dyslexic@1.0.3/open-dyslexic-regular.woff2\\') format(\\'woff2\\'),\\n';\r\n  css += '       url(\\'https://cdn.jsdelivr.net/npm/open-dyslexic@1.0.3/open-dyslexic-regular.woff\\') format(\\'woff\\');\\n';\r\n  css += '  font-weight: normal;\\n';\r\n  css += '  font-style: normal;\\n';\r\n  css += '  font-display: swap;\\n';\r\n  css += '}\\n\\n';\r\n  \r\n  css += '@font-face {\\n';\r\n  css += '  font-family: \\'OpenDyslexic\\';\\n';\r\n  css += '  src: url(\\'https://cdn.jsdelivr.net/npm/open-dyslexic@1.0.3/open-dyslexic-bold.woff2\\') format(\\'woff2\\'),\\n';\r\n  css += '       url(\\'https://cdn.jsdelivr.net/npm/open-dyslexic@1.0.3/open-dyslexic-bold.woff\\') format(\\'woff\\');\\n';\r\n  css += '  font-weight: bold;\\n';\r\n  css += '  font-style: normal;\\n';\r\n  css += '  font-display: swap;\\n';\r\n  css += '}\\n\\n';\r\n  \r\n  // Apply dyslexia-friendly font family to all elements\r\n  css += 'body.neuro-dyslexia-mode {\\n';\r\n  css += '  background-color: ' + colors.background + ' !important;\\n';\r\n  css += '  color: ' + colors.text + ' !important;\\n';\r\n  css += '}\\n\\n';\r\n  \r\n  // Apply font to all elements\r\n  css += 'body.neuro-dyslexia-mode * {\\n';\r\n  css += '  font-family: \\'OpenDyslexic\\', \\'Lexend\\', \\'Comic Neue\\', \\'Comic Sans MS\\', \\'Arial\\', sans-serif !important;\\n';\r\n  css += '}\\n\\n';\r\n  \r\n  // Improve paragraphs readability\r\n  css += 'body.neuro-dyslexia-mode p,\\n';\r\n  css += 'body.neuro-dyslexia-mode li,\\n';\r\n  css += 'body.neuro-dyslexia-mode span,\\n';\r\n  css += 'body.neuro-dyslexia-mode div {\\n';\r\n  css += '  line-height: 1.8 !important;\\n';\r\n  css += '  letter-spacing: 0.05em !important;\\n';\r\n  css += '  word-spacing: 0.1em !important;\\n';\r\n  css += '  font-size: 1.05em !important;\\n';\r\n  css += '}\\n\\n';\r\n  \r\n  // Increase spacing for paragraphs\r\n  css += 'body.neuro-dyslexia-mode p {\\n';\r\n  css += '  margin-bottom: 1em !important;\\n';\r\n  css += '}\\n\\n';\r\n  \r\n  // Improve readability with text backgrounds on certain elements\r\n  css += 'body.neuro-dyslexia-mode pre,\\n';\r\n  css += 'body.neuro-dyslexia-mode code,\\n';\r\n  css += 'body.neuro-dyslexia-mode blockquote {\\n';\r\n  css += '  background-color: ' + colors.textBackground + ' !important;\\n';\r\n  css += '  padding: 0.25em 0.5em !important;\\n';\r\n  css += '  border-radius: 4px !important;\\n';\r\n  css += '  box-decoration-break: clone !important;\\n';\r\n  css += '}\\n\\n';\r\n  \r\n  // Fix headings\r\n  css += 'body.neuro-dyslexia-mode h1,\\n';\r\n  css += 'body.neuro-dyslexia-mode h2,\\n';\r\n  css += 'body.neuro-dyslexia-mode h3,\\n';\r\n  css += 'body.neuro-dyslexia-mode h4,\\n';\r\n  css += 'body.neuro-dyslexia-mode h5,\\n';\r\n  css += 'body.neuro-dyslexia-mode h6 {\\n';\r\n  css += '  color: ' + colors.headers + ' !important;\\n';\r\n  css += '  margin-top: 1.5em !important;\\n';\r\n  css += '  margin-bottom: 0.8em !important;\\n';\r\n  css += '  line-height: 1.4 !important;\\n';\r\n  css += '  font-weight: bold !important;\\n';\r\n  css += '}\\n\\n';\r\n  \r\n  // Size headings more clearly\r\n  css += 'body.neuro-dyslexia-mode h1 { font-size: 1.8em !important; }\\n';\r\n  css += 'body.neuro-dyslexia-mode h2 { font-size: 1.6em !important; }\\n';\r\n  css += 'body.neuro-dyslexia-mode h3 { font-size: 1.4em !important; }\\n';\r\n  css += 'body.neuro-dyslexia-mode h4 { font-size: 1.3em !important; }\\n';\r\n  css += 'body.neuro-dyslexia-mode h5 { font-size: 1.2em !important; }\\n';\r\n  css += 'body.neuro-dyslexia-mode h6 { font-size: 1.1em !important; }\\n\\n';\r\n  \r\n  // Improve form fields\r\n  css += 'body.neuro-dyslexia-mode input,\\n';\r\n  css += 'body.neuro-dyslexia-mode textarea,\\n';\r\n  css += 'body.neuro-dyslexia-mode select {\\n';\r\n  css += '  font-size: 1.05em !important;\\n';\r\n  css += '  padding: 0.5em !important;\\n';\r\n  css += '  line-height: 1.5 !important;\\n';\r\n  css += '}\\n\\n';\r\n  \r\n  // Links\r\n  css += 'body.neuro-dyslexia-mode a {\\n';\r\n  css += '  color: ' + colors.links + ' !important;\\n';\r\n  css += '  text-decoration: underline !important;\\n';\r\n  css += '  text-underline-offset: 0.15em !important;\\n';\r\n  css += '}\\n\\n';\r\n  \r\n  // Improve focus states\r\n  css += 'body.neuro-dyslexia-mode a:focus,\\n';\r\n  css += 'body.neuro-dyslexia-mode button:focus,\\n';\r\n  css += 'body.neuro-dyslexia-mode input:focus,\\n';\r\n  css += 'body.neuro-dyslexia-mode select:focus,\\n';\r\n  css += 'body.neuro-dyslexia-mode textarea:focus {\\n';\r\n  css += '  outline: 3px solid ' + colors.links + ' !important;\\n';\r\n  css += '  outline-offset: 2px !important;\\n';\r\n  css += '}\\n\\n';\r\n  \r\n  return css;\r\n}\r\n\r\nfunction applyYouTubeSpecificFixes(websiteTheme) {\r\n  let ytFixCss = '';\r\n  \r\n  // Fix YouTube sidebar font\r\n  ytFixCss += 'body.neuro-dyslexia-mode ytd-guide-renderer #guide-content,\\n';\r\n  ytFixCss += 'body.neuro-dyslexia-mode ytd-mini-guide-renderer {\\n';\r\n  ytFixCss += '  font-size: 0.9em !important;\\n';\r\n  ytFixCss += '}\\n\\n';\r\n  \r\n  // Fix video title\r\n  ytFixCss += 'body.neuro-dyslexia-mode ytd-watch-metadata h1.title {\\n';\r\n  ytFixCss += '  line-height: 1.4 !important;\\n';\r\n  ytFixCss += '  font-size: 1.3em !important;\\n';\r\n  ytFixCss += '}\\n\\n';\r\n  \r\n  // Fix comments\r\n  ytFixCss += 'body.neuro-dyslexia-mode ytd-comment-renderer #content-text {\\n';\r\n  ytFixCss += '  line-height: 1.6 !important;\\n';\r\n  ytFixCss += '}\\n\\n';\r\n  \r\n  // Apply YouTube-specific styles\r\n  createStyleElement('neuro-dyslexia-youtube', ytFixCss, 'dyslexia');\r\n}\r\n","// Focus mode (ADHD/Attention Support) implementation\r\nimport { createStyleElement, createControlButton, createDynamicContentObserver } from '../utils/common';\r\n\r\nexport function applyFocusMode() {\r\n  // Add a class to the body\r\n  document.body.classList.add('neuro-focus-mode');\r\n  \r\n  // Get website theme (dark or light) and site-specific settings\r\n  const websiteTheme = window.neuroCustomizerContext?.websiteTheme || 'light';\r\n  const siteSettings = window.neuroCustomizerContext?.siteSettings || {};\r\n  \r\n  // Create base focus styles\r\n  const baseStyles = createBaseFocusStyles(websiteTheme);\r\n  createStyleElement('neuro-focus-base', baseStyles, 'focus');\r\n  \r\n  // Apply site-specific fixes if needed\r\n  if (siteSettings.isDynamic) {\r\n    if (window.location.hostname.includes('youtube.com')) {\r\n      applyYouTubeSpecificFixes(websiteTheme);\r\n    }\r\n    \r\n    // Create observer for dynamic content\r\n    createDynamicContentObserver(() => {\r\n      applyFocusToNewElements(websiteTheme);\r\n    });\r\n  }\r\n  \r\n  // Create and add reading ruler\r\n  createReadingRuler(websiteTheme);\r\n  \r\n  // Add keyboard hint tooltip\r\n  createKeyboardHintTooltip(websiteTheme);\r\n  \r\n  console.log('Improved Focus mode applied with', websiteTheme, 'theme');\r\n}\r\n\r\n/**\r\n * Create the base CSS styles for focus mode\r\n * @param {string} websiteTheme - 'dark' or 'light'\r\n * @returns {string} CSS styles\r\n */\r\nfunction createBaseFocusStyles(websiteTheme) {\r\n  // Define color palette based on theme\r\n  const colors = websiteTheme === 'dark'\r\n    ? {\r\n        highlight: 'rgba(120, 130, 240, 0.1)',\r\n        border: 'rgba(120, 130, 240, 0.5)',\r\n        muted: 'rgba(200, 200, 210, 0.8)',\r\n        ruler: 'rgba(120, 130, 240, 0.1)',\r\n        rulerBorder: 'rgba(120, 130, 240, 0.3)',\r\n        text: '#E0E0E6',\r\n        textHighlight: '#B4B1FF',\r\n        paragraphBg: 'rgba(50, 50, 60, 0.4)'\r\n      }\r\n    : {\r\n        highlight: 'rgba(99, 102, 241, 0.05)',\r\n        border: 'rgba(99, 102, 241, 0.5)',\r\n        muted: 'rgba(80, 80, 90, 0.7)',\r\n        ruler: 'rgba(99, 102, 241, 0.05)',\r\n        rulerBorder: 'rgba(99, 102, 241, 0.3)',\r\n        text: '#333333',\r\n        textHighlight: '#4F46E5',\r\n        paragraphBg: 'rgba(245, 247, 250, 0.8)'\r\n      };\r\n  \r\n  // Build CSS with concatenation to avoid template literal issues\r\n  let css = '';\r\n  \r\n  // Base styles\r\n  css += '/* Base styles */\\n';\r\n  css += 'body.neuro-focus-mode {\\n';\r\n  css += '  overflow-x: hidden !important;\\n';\r\n  css += '}\\n\\n';\r\n  \r\n  // Improved paragraph readability - subtle improvements to text\r\n  css += '/* Improved paragraph readability - subtle improvements to text */\\n';\r\n  css += 'body.neuro-focus-mode p,\\n';\r\n  css += 'body.neuro-focus-mode li,\\n';\r\n  css += 'body.neuro-focus-mode h1,\\n';\r\n  css += 'body.neuro-focus-mode h2,\\n';\r\n  css += 'body.neuro-focus-mode h3,\\n';\r\n  css += 'body.neuro-focus-mode h4,\\n';\r\n  css += 'body.neuro-focus-mode h5,\\n';\r\n  css += 'body.neuro-focus-mode h6 {\\n';\r\n  css += '  line-height: 1.6 !important;\\n';\r\n  css += '  max-width: 70ch !important;\\n';\r\n  css += '  margin-left: auto !important;\\n';\r\n  css += '  margin-right: auto !important;\\n';\r\n  css += '  color: ' + colors.text + ' !important;\\n';\r\n  css += '}\\n\\n';\r\n  \r\n  // Subtle paragraph styling for improved focus\r\n  css += '/* Subtle paragraph styling for improved focus */\\n';\r\n  css += 'body.neuro-focus-mode p,\\n';\r\n  css += 'body.neuro-focus-mode li {\\n';\r\n  css += '  margin-bottom: 1.2em !important;\\n';\r\n  css += '  padding-left: 0.75em !important;\\n';\r\n  css += '  border-left: 3px solid ' + colors.border + ' !important;\\n';\r\n  css += '  background-color: ' + colors.paragraphBg + ' !important;\\n';\r\n  css += '  padding: 0.5em 0.75em !important;\\n';\r\n  css += '  border-radius: 0 4px 4px 0 !important;\\n';\r\n  css += '  transition: background-color 0.2s ease, border-left-color 0.2s ease !important;\\n';\r\n  css += '}\\n\\n';\r\n  \r\n  // Current paragraph highlight when hovered\r\n  css += '/* Current paragraph highlight when hovered */\\n';\r\n  css += 'body.neuro-focus-mode p:hover,\\n';\r\n  css += 'body.neuro-focus-mode li:hover {\\n';\r\n  css += '  background-color: ' + colors.highlight + ' !important;\\n';\r\n  css += '  border-left-color: ' + colors.textHighlight + ' !important;\\n';\r\n  css += '  border-left-width: 4px !important;\\n';\r\n  css += '}\\n\\n';\r\n  \r\n  // Add focus pulse animation\r\n  css += '@keyframes focus-pulse {\\n';\r\n  css += '  0% { border-left-width: 3px; }\\n';\r\n  css += '  50% { border-left-width: 5px; }\\n';\r\n  css += '  100% { border-left-width: 3px; }\\n';\r\n  css += '}\\n\\n';\r\n  \r\n  // Reduce visual noise from sidebars and non-essential elements\r\n  css += '/* Reduce visual noise from sidebars and non-essential elements */\\n';\r\n  css += 'body.neuro-focus-mode aside,\\n';\r\n  css += 'body.neuro-focus-mode .sidebar,\\n';\r\n  css += 'body.neuro-focus-mode nav:not([aria-label=\"breadcrumb\"]):not([aria-label=\"Breadcrumb\"]),\\n';\r\n  css += 'body.neuro-focus-mode footer,\\n';\r\n  css += 'body.neuro-focus-mode .footer,\\n';\r\n  css += 'body.neuro-focus-mode .related,\\n';\r\n  css += 'body.neuro-focus-mode .recommendations,\\n';\r\n  css += 'body.neuro-focus-mode [role=\"complementary\"],\\n';\r\n  css += 'body.neuro-focus-mode [role=\"banner\"] > *:not(nav):not(.search),\\n';\r\n  css += 'body.neuro-focus-mode .social-media,\\n';\r\n  css += 'body.neuro-focus-mode .share-buttons,\\n';\r\n  css += 'body.neuro-focus-mode .comments-section,\\n';\r\n  css += 'body.neuro-focus-mode .widget-area {\\n';\r\n  css += '  opacity: 0.5 !important;\\n';\r\n  css += '  filter: grayscale(30%) !important;\\n';\r\n  css += '  transition: opacity 0.3s ease, filter 0.3s ease !important;\\n';\r\n  css += '}\\n\\n';\r\n  \r\n  // Restore opacity on hover for accessibility\r\n  css += '/* Restore opacity on hover for accessibility */\\n';\r\n  css += 'body.neuro-focus-mode aside:hover,\\n';\r\n  css += 'body.neuro-focus-mode .sidebar:hover,\\n';\r\n  css += 'body.neuro-focus-mode nav:hover,\\n';\r\n  css += 'body.neuro-focus-mode footer:hover,\\n';\r\n  css += 'body.neuro-focus-mode .footer:hover,\\n';\r\n  css += 'body.neuro-focus-mode .related:hover,\\n';\r\n  css += 'body.neuro-focus-mode .recommendations:hover,\\n';\r\n  css += 'body.neuro-focus-mode [role=\"complementary\"]:hover,\\n';\r\n  css += 'body.neuro-focus-mode [role=\"banner\"] > *:hover,\\n';\r\n  css += 'body.neuro-focus-mode .social-media:hover,\\n';\r\n  css += 'body.neuro-focus-mode .share-buttons:hover,\\n';\r\n  css += 'body.neuro-focus-mode .comments-section:hover,\\n';\r\n  css += 'body.neuro-focus-mode .widget-area:hover {\\n';\r\n  css += '  opacity: 1 !important;\\n';\r\n  css += '  filter: grayscale(0%) !important;\\n';\r\n  css += '}\\n\\n';\r\n  \r\n  // Improved link styles\r\n  css += '/* Improved link styles */\\n';\r\n  css += 'body.neuro-focus-mode a {\\n';\r\n  css += '  color: ' + colors.textHighlight + ' !important;\\n';\r\n  css += '  text-decoration: underline !important;\\n';\r\n  css += '  text-underline-offset: 2px !important;\\n';\r\n  css += '  font-weight: bold !important;\\n';\r\n  css += '}\\n\\n';\r\n  \r\n  // Fade images slightly to reduce visual distraction\r\n  css += '/* Fade images slightly to reduce visual distraction */\\n';\r\n  css += 'body.neuro-focus-mode img:not([src*=\"logo\"]):not([alt*=\"logo\"]):not([alt*=\"Logo\"]) {\\n';\r\n  css += '  filter: saturate(90%) !important;\\n';\r\n  css += '  opacity: 0.9 !important;\\n';\r\n  css += '  transition: filter 0.3s ease, opacity 0.3s ease !important;\\n';\r\n  css += '}\\n\\n';\r\n  \r\n  // Restore images on hover\r\n  css += '/* Restore images on hover */\\n';\r\n  css += 'body.neuro-focus-mode img:hover {\\n';\r\n  css += '  filter: saturate(100%) !important;\\n';\r\n  css += '  opacity: 1 !important;\\n';\r\n  css += '}\\n\\n';\r\n  \r\n  // Improved headings for better document structure scanning\r\n  css += '/* Improved headings for better document structure scanning */\\n';\r\n  css += 'body.neuro-focus-mode h1,\\n';\r\n  css += 'body.neuro-focus-mode h2,\\n';\r\n  css += 'body.neuro-focus-mode h3 {\\n';\r\n  css += '  color: ' + colors.textHighlight + ' !important;\\n';\r\n  css += '  border-bottom: 1px solid ' + colors.border + ' !important;\\n';\r\n  css += '  padding-bottom: 0.3em !important;\\n';\r\n  css += '  margin-top: 1.5em !important;\\n';\r\n  css += '  font-weight: bold !important;\\n';\r\n  css += '}\\n\\n';\r\n  \r\n  // Reading ruler styles - hidden by default\r\n  css += '/* Reading ruler styles - hidden by default */\\n';\r\n  css += '#neuro-reading-ruler {\\n';\r\n  css += '  position: fixed !important;\\n';\r\n  css += '  left: 0 !important;\\n';\r\n  css += '  right: 0 !important;\\n';\r\n  css += '  height: 30px !important;\\n';\r\n  css += '  background-color: ' + colors.ruler + ' !important;\\n';\r\n  css += '  border-top: 1px solid ' + colors.rulerBorder + ' !important;\\n';\r\n  css += '  border-bottom: 1px solid ' + colors.rulerBorder + ' !important;\\n';\r\n  css += '  z-index: 999999 !important;\\n';\r\n  css += '  pointer-events: none !important;\\n';\r\n  css += '  opacity: 0 !important;\\n';\r\n  css += '  transition: opacity 0.2s ease !important;\\n';\r\n  css += '}\\n\\n';\r\n  \r\n  // Show reading ruler when activated\r\n  css += '/* Show reading ruler when activated */\\n';\r\n  css += '#neuro-reading-ruler.active {\\n';\r\n  css += '  opacity: 0.8 !important;\\n';\r\n  css += '}\\n\\n';\r\n  \r\n  // Keyboard shortcut hint tooltip\r\n  css += '/* Keyboard shortcut hint tooltip */\\n';\r\n  css += '#neuro-keyboard-hint {\\n';\r\n  css += '  position: fixed !important;\\n';\r\n  css += '  bottom: 20px !important;\\n';\r\n  css += '  left: 50% !important;\\n';\r\n  css += '  transform: translateX(-50%) !important;\\n';\r\n  css += '  background-color: rgba(30, 30, 30, 0.8) !important;\\n';\r\n  css += '  color: white !important;\\n';\r\n  css += '  padding: 10px 15px !important;\\n';\r\n  css += '  border-radius: 8px !important;\\n';\r\n  css += '  z-index: 999999 !important;\\n';\r\n  css += '  font-family: system-ui, -apple-system, sans-serif !important;\\n';\r\n  css += '  font-size: 14px !important;\\n';\r\n  css += '  opacity: 0 !important;\\n';\r\n  css += '  transition: opacity 0.3s ease !important;\\n';\r\n  css += '}\\n\\n';\r\n  \r\n  return css;\r\n}\r\n\r\n/**\r\n * Create a reading ruler that follows the mouse\r\n * @param {string} websiteTheme - 'dark' or 'light'\r\n */\r\nfunction createReadingRuler(websiteTheme) {\r\n  // Create ruler element if it doesn't exist\r\n  if (!document.getElementById('neuro-reading-ruler')) {\r\n    const ruler = document.createElement('div');\r\n    ruler.id = 'neuro-reading-ruler';\r\n    document.body.appendChild(ruler);\r\n    \r\n    // Add to cleanup list\r\n    if (!window.neuroCustomizerElements) {\r\n      window.neuroCustomizerElements = [];\r\n    }\r\n    window.neuroCustomizerElements.push(ruler);\r\n    \r\n    // Add event listeners for mouse movement\r\n    document.addEventListener('mousemove', handleMouseMove);\r\n    \r\n    // Add event listener for keyboard toggle\r\n    document.addEventListener('keydown', handleKeyboardToggle);\r\n    \r\n    // Create ruler toggle button\r\n    createRulerToggleButton(websiteTheme);\r\n  }\r\n}\r\n\r\n/**\r\n * Handle mouse movement to update reading ruler position\r\n * @param {MouseEvent} event - Mouse event\r\n */\r\nfunction handleMouseMove(event) {\r\n  const ruler = document.getElementById('neuro-reading-ruler');\r\n  if (ruler && ruler.classList.contains('active')) {\r\n    ruler.style.top = (event.clientY - 15) + 'px';\r\n  }\r\n}\r\n\r\n/**\r\n * Handle keyboard shortcuts for ruler toggle\r\n * @param {KeyboardEvent} event - Keyboard event\r\n */\r\nfunction handleKeyboardToggle(event) {\r\n  // Toggle ruler with Alt+R\r\n  if (event.altKey && event.key === 'r') {\r\n    event.preventDefault();\r\n    toggleReadingRuler();\r\n  }\r\n}\r\n\r\n/**\r\n * Toggle the reading ruler on/off\r\n */\r\nfunction toggleReadingRuler() {\r\n  const ruler = document.getElementById('neuro-reading-ruler');\r\n  if (ruler) {\r\n    ruler.classList.toggle('active');\r\n  }\r\n}\r\n\r\n/**\r\n * Create a button to toggle the reading ruler\r\n * @param {string} websiteTheme - 'dark' or 'light'\r\n */\r\nfunction createRulerToggleButton(websiteTheme) {\r\n  // Create toggle button\r\n  const icon = '<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\"><path d=\"M3 19h18M3 14h18M3 9h18M3 4h18\"/></svg>';\r\n  createControlButton(\r\n    'neuro-ruler-toggle',\r\n    'Reading Guide',\r\n    toggleReadingRuler,\r\n    {\r\n      position: 'bottom-left',\r\n      icon,\r\n      tooltip: 'Toggle reading guide (Alt+R)',\r\n      size: 'small'\r\n    }\r\n  );\r\n}\r\n\r\n/**\r\n * Create a tooltip showing keyboard shortcuts\r\n * @param {string} websiteTheme - 'dark' or 'light'\r\n */\r\nfunction createKeyboardHintTooltip(websiteTheme) {\r\n  // Create hint element if it doesn't exist\r\n  if (!document.getElementById('neuro-keyboard-hint')) {\r\n    const hint = document.createElement('div');\r\n    hint.id = 'neuro-keyboard-hint';\r\n    hint.textContent = 'Tip: Use Alt+R to toggle the reading guide';\r\n    document.body.appendChild(hint);\r\n    \r\n    // Add to cleanup list\r\n    if (!window.neuroCustomizerElements) {\r\n      window.neuroCustomizerElements = [];\r\n    }\r\n    window.neuroCustomizerElements.push(hint);\r\n    \r\n    // Show hint briefly, then fade out\r\n    setTimeout(() => {\r\n      hint.style.opacity = '1';\r\n      \r\n      setTimeout(() => {\r\n        hint.style.opacity = '0';\r\n      }, 5000);\r\n    }, 2000);\r\n  }\r\n}\r\n\r\n/**\r\n * Apply focus styles to newly added elements\r\n * @param {string} websiteTheme - 'dark' or 'light'\r\n */\r\nfunction applyFocusToNewElements(websiteTheme) {\r\n  // Add any dynamic content specific handling here\r\n}\r\n\r\n/**\r\n * Apply YouTube-specific focus mode fixes\r\n * @param {string} websiteTheme - 'dark' or 'light'\r\n */\r\nfunction applyYouTubeSpecificFixes(websiteTheme) {\r\n  let ytFixCss = '';\r\n  \r\n  // Improve video page focus\r\n  ytFixCss += 'body.neuro-focus-mode ytd-watch-flexy #primary {\\n';\r\n  ytFixCss += '  max-width: 1000px !important;\\n';\r\n  ytFixCss += '  margin: 0 auto !important;\\n';\r\n  ytFixCss += '}\\n\\n';\r\n  \r\n  // Make comments more readable\r\n  ytFixCss += 'body.neuro-focus-mode ytd-comment-thread-renderer {\\n';\r\n  ytFixCss += '  padding: 10px !important;\\n';\r\n  ytFixCss += '  border-bottom: 1px solid rgba(128, 128, 128, 0.2) !important;\\n';\r\n  ytFixCss += '}\\n\\n';\r\n  \r\n  // Apply YouTube-specific styles\r\n  createStyleElement('neuro-focus-youtube', ytFixCss, 'focus');\r\n}\r\n","// High Contrast Mode implementation\r\nimport { createStyleElement, createControlButton } from '../utils/common';\r\n\r\nexport function applyHighContrastMode() {\r\n  // Add a class to the body\r\n  document.body.classList.add('neuro-high-contrast-mode');\r\n  \r\n  // Get website theme (dark or light) and site-specific settings\r\n  const websiteTheme = window.neuroCustomizerContext?.websiteTheme || 'light';\r\n  const siteSettings = window.neuroCustomizerContext?.siteSettings || {};\r\n  \r\n  // Determine initial color scheme based on website theme\r\n  const initialScheme = websiteTheme === 'dark' ? 'yellow' : 'white';\r\n  \r\n  // Generate the list of selectors to exclude from high contrast\r\n  const excludeSelectors = siteSettings.excludeFromHighContrast || [];\r\n  const excludeFromContrastSelectors = excludeSelectors.length > 0 \r\n    ? ':not(' + excludeSelectors.join('):not(') + ')' \r\n    : '';\r\n  \r\n  // Apply the main high contrast styles\r\n  const baseStyles = createBaseStyles(websiteTheme, excludeFromContrastSelectors);\r\n  createStyleElement('neuro-high-contrast-base', baseStyles, 'high-contrast');\r\n  \r\n  // Apply scheme-specific styles\r\n  applyColorScheme(initialScheme);\r\n  \r\n  // Add color scheme toggle button\r\n  createColorSchemeToggle(initialScheme === 'white' ? 'yellow' : 'white');\r\n  \r\n  // Fix for SVG images that might be getting clipped or hidden\r\n  const svgFixStyles = createSvgFixStyles();\r\n  createStyleElement('neuro-high-contrast-svg-fix', svgFixStyles, 'high-contrast');\r\n  \r\n  // Site-specific fixes\r\n  if (siteSettings.isDynamic) {\r\n    if (window.location.hostname.includes('youtube.com')) {\r\n      applyYouTubeSpecificFixes(websiteTheme);\r\n    } else if (window.location.hostname.includes('google.com')) {\r\n      applyGoogleSpecificFixes(websiteTheme);\r\n    }\r\n  }\r\n  \r\n  console.log('Improved high contrast mode applied with', initialScheme, 'scheme');\r\n}\r\n\r\nfunction createBaseStyles(websiteTheme, excludeFromContrastSelectors) {\r\n  // Build CSS with concatenation to avoid template literal issues\r\n  let css = '';\r\n  \r\n  // Base high contrast styles\r\n  css += '/* Base high contrast styles */\\n';\r\n  css += 'body.neuro-high-contrast-mode {\\n';\r\n  css += '  /* Will be overridden by specific color schemes */\\n';\r\n  css += '  transition: none !important;\\n';\r\n  css += '}\\n\\n';\r\n  \r\n  // Text elements - more targeted selectors\r\n  css += '/* Text elements - more targeted selectors */\\n';\r\n  css += 'body.neuro-high-contrast-mode h1,\\n';\r\n  css += 'body.neuro-high-contrast-mode h2,\\n';\r\n  css += 'body.neuro-high-contrast-mode h3,\\n';\r\n  css += 'body.neuro-high-contrast-mode h4,\\n';\r\n  css += 'body.neuro-high-contrast-mode h5,\\n';\r\n  css += 'body.neuro-high-contrast-mode h6,\\n';\r\n  css += 'body.neuro-high-contrast-mode p,\\n';\r\n  css += 'body.neuro-high-contrast-mode li,\\n';\r\n  css += 'body.neuro-high-contrast-mode dt,\\n';\r\n  css += 'body.neuro-high-contrast-mode dd,\\n';\r\n  css += 'body.neuro-high-contrast-mode label,\\n';\r\n  css += 'body.neuro-high-contrast-mode figcaption' + excludeFromContrastSelectors + ' {\\n';\r\n  css += '  /* Will be set by scheme */\\n';\r\n  css += '  text-shadow: none !important;\\n';\r\n  css += '}\\n\\n';\r\n  \r\n  // Links - will be customized by scheme\r\n  css += '/* Links - will be customized by scheme */\\n';\r\n  css += 'body.neuro-high-contrast-mode a:link,\\n';\r\n  css += 'body.neuro-high-contrast-mode a:visited {\\n';\r\n  css += '  text-decoration: underline !important;\\n';\r\n  css += '  text-decoration-thickness: 2px !important;\\n';\r\n  css += '  text-underline-offset: 3px !important;\\n';\r\n  css += '}\\n\\n';\r\n  \r\n  // Remove subtle visual effects but preserve images\r\n  css += '/* Remove subtle visual effects but preserve images */\\n';\r\n  css += 'body.neuro-high-contrast-mode *' + excludeFromContrastSelectors + ' {\\n';\r\n  css += '  text-shadow: none !important;\\n';\r\n  css += '  box-shadow: none !important;\\n';\r\n  css += '}\\n\\n';\r\n  \r\n  // Only remove decorative background images, not content images\r\n  css += '/* Only remove decorative background images, not content images */\\n';\r\n  css += 'body.neuro-high-contrast-mode header,\\n';\r\n  css += 'body.neuro-high-contrast-mode footer,\\n';\r\n  css += 'body.neuro-high-contrast-mode nav,\\n';\r\n  css += 'body.neuro-high-contrast-mode aside {\\n';\r\n  css += '  background-image: none !important;\\n';\r\n  css += '}\\n\\n';\r\n  \r\n  // Increase font size slightly for better readability\r\n  css += '/* Increase font size slightly for better readability */\\n';\r\n  css += 'body.neuro-high-contrast-mode {\\n';\r\n  css += '  font-size: 110% !important;\\n';\r\n  css += '}\\n\\n';\r\n  \r\n  // Ensure form elements are clearly visible\r\n  css += '/* Ensure form elements are clearly visible */\\n';\r\n  css += 'body.neuro-high-contrast-mode input,\\n';\r\n  css += 'body.neuro-high-contrast-mode select,\\n';\r\n  css += 'body.neuro-high-contrast-mode textarea,\\n';\r\n  css += 'body.neuro-high-contrast-mode button {\\n';\r\n  css += '  border-width: 2px !important;\\n';\r\n  css += '  outline-width: 2px !important;\\n';\r\n  css += '}\\n\\n';\r\n  \r\n  // Enhance focus states\r\n  css += '/* Enhance focus states */\\n';\r\n  css += 'body.neuro-high-contrast-mode input:focus,\\n';\r\n  css += 'body.neuro-high-contrast-mode select:focus,\\n';\r\n  css += 'body.neuro-high-contrast-mode textarea:focus,\\n';\r\n  css += 'body.neuro-high-contrast-mode button:focus {\\n';\r\n  css += '  outline: 3px solid currentColor !important;\\n';\r\n  css += '  outline-offset: 2px !important;\\n';\r\n  css += '}\\n\\n';\r\n  \r\n  return css;\r\n}\r\n\r\nfunction createSvgFixStyles() {\r\n  let css = '';\r\n  \r\n  // Fix SVG visibility with high contrast\r\n  css += '/* Fix SVG visibility with high contrast */\\n';\r\n  css += 'body.neuro-high-contrast-mode svg {\\n';\r\n  css += '  stroke-width: 1.5 !important;\\n';\r\n  css += '  fill: currentColor !important;\\n';\r\n  css += '}\\n\\n';\r\n  \r\n  // Ensure icons remain visible\r\n  css += '/* Ensure icons remain visible */\\n';\r\n  css += 'body.neuro-high-contrast-mode [class*=\"icon\"],\\n';\r\n  css += 'body.neuro-high-contrast-mode [class*=\"Icon\"],\\n';\r\n  css += 'body.neuro-high-contrast-mode [class*=\"logo\"],\\n';\r\n  css += 'body.neuro-high-contrast-mode [class*=\"Logo\"] {\\n';\r\n  css += '  opacity: 1 !important;\\n';\r\n  css += '}\\n\\n';\r\n  \r\n  return css;\r\n}\r\n\r\n/**\r\n * Apply specific color scheme for high contrast mode\r\n * @param {string} scheme Color scheme name ('white', 'yellow', 'black')\r\n */\r\nfunction applyColorScheme(scheme) {\r\n  // Remove any existing scheme styles\r\n  const existingScheme = document.getElementById('neuro-high-contrast-scheme');\r\n  if (existingScheme) {\r\n    existingScheme.remove();\r\n  }\r\n  \r\n  // Apply the selected scheme\r\n  let schemeStyles = '';\r\n  \r\n  switch (scheme) {\r\n    case 'white':\r\n      schemeStyles = createWhiteOnBlackScheme();\r\n      break;\r\n    case 'yellow':\r\n      schemeStyles = createYellowOnBlackScheme();\r\n      break;\r\n    default:\r\n      schemeStyles = createWhiteOnBlackScheme();\r\n  }\r\n  \r\n  // Apply scheme styles\r\n  createStyleElement('neuro-high-contrast-scheme', schemeStyles, 'high-contrast');\r\n}\r\n\r\nfunction createWhiteOnBlackScheme() {\r\n  let css = '';\r\n  \r\n  // Base styles for white on black\r\n  css += '/* White on black scheme */\\n';\r\n  css += 'body.neuro-high-contrast-mode {\\n';\r\n  css += '  background-color: #000000 !important;\\n';\r\n  css += '  color: #FFFFFF !important;\\n';\r\n  css += '}\\n\\n';\r\n  \r\n  // Apply to all elements to override site styles\r\n  css += 'body.neuro-high-contrast-mode *:not(img):not(video):not(svg):not([role=\"img\"]) {\\n';\r\n  css += '  background-color: #000000 !important;\\n';\r\n  css += '  color: #FFFFFF !important;\\n';\r\n  css += '  border-color: #FFFFFF !important;\\n';\r\n  css += '}\\n\\n';\r\n  \r\n  // Links\r\n  css += 'body.neuro-high-contrast-mode a:link,\\n';\r\n  css += 'body.neuro-high-contrast-mode a:visited {\\n';\r\n  css += '  color: #FFFFFF !important;\\n';\r\n  css += '  background-color: #000000 !important;\\n';\r\n  css += '  text-decoration-color: #FFFFFF !important;\\n';\r\n  css += '}\\n\\n';\r\n  \r\n  // Focus and hover states\r\n  css += 'body.neuro-high-contrast-mode a:hover,\\n';\r\n  css += 'body.neuro-high-contrast-mode a:focus,\\n';\r\n  css += 'body.neuro-high-contrast-mode button:hover,\\n';\r\n  css += 'body.neuro-high-contrast-mode button:focus {\\n';\r\n  css += '  background-color: #FFFFFF !important;\\n';\r\n  css += '  color: #000000 !important;\\n';\r\n  css += '  outline: 2px solid #FFFFFF !important;\\n';\r\n  css += '}\\n\\n';\r\n  \r\n  // Form controls\r\n  css += 'body.neuro-high-contrast-mode input,\\n';\r\n  css += 'body.neuro-high-contrast-mode textarea,\\n';\r\n  css += 'body.neuro-high-contrast-mode select {\\n';\r\n  css += '  background-color: #000000 !important;\\n';\r\n  css += '  color: #FFFFFF !important;\\n';\r\n  css += '  border: 2px solid #FFFFFF !important;\\n';\r\n  css += '}\\n\\n';\r\n  \r\n  return css;\r\n}\r\n\r\nfunction createYellowOnBlackScheme() {\r\n  let css = '';\r\n  \r\n  // Base styles for yellow on black\r\n  css += '/* Yellow on black scheme */\\n';\r\n  css += 'body.neuro-high-contrast-mode {\\n';\r\n  css += '  background-color: #000000 !important;\\n';\r\n  css += '  color: #FFFF00 !important;\\n';\r\n  css += '}\\n\\n';\r\n  \r\n  // Apply to all elements to override site styles\r\n  css += 'body.neuro-high-contrast-mode *:not(img):not(video):not(svg):not([role=\"img\"]) {\\n';\r\n  css += '  background-color: #000000 !important;\\n';\r\n  css += '  color: #FFFF00 !important;\\n';\r\n  css += '  border-color: #FFFF00 !important;\\n';\r\n  css += '}\\n\\n';\r\n  \r\n  // Links\r\n  css += 'body.neuro-high-contrast-mode a:link,\\n';\r\n  css += 'body.neuro-high-contrast-mode a:visited {\\n';\r\n  css += '  color: #FFFF00 !important;\\n';\r\n  css += '  background-color: #000000 !important;\\n';\r\n  css += '  text-decoration-color: #FFFF00 !important;\\n';\r\n  css += '}\\n\\n';\r\n  \r\n  // Focus and hover states\r\n  css += 'body.neuro-high-contrast-mode a:hover,\\n';\r\n  css += 'body.neuro-high-contrast-mode a:focus,\\n';\r\n  css += 'body.neuro-high-contrast-mode button:hover,\\n';\r\n  css += 'body.neuro-high-contrast-mode button:focus {\\n';\r\n  css += '  background-color: #FFFF00 !important;\\n';\r\n  css += '  color: #000000 !important;\\n';\r\n  css += '  outline: 2px solid #FFFF00 !important;\\n';\r\n  css += '}\\n\\n';\r\n  \r\n  // Form controls\r\n  css += 'body.neuro-high-contrast-mode input,\\n';\r\n  css += 'body.neuro-high-contrast-mode textarea,\\n';\r\n  css += 'body.neuro-high-contrast-mode select {\\n';\r\n  css += '  background-color: #000000 !important;\\n';\r\n  css += '  color: #FFFF00 !important;\\n';\r\n  css += '  border: 2px solid #FFFF00 !important;\\n';\r\n  css += '}\\n\\n';\r\n  \r\n  return css;\r\n}\r\n\r\n/**\r\n * Create a toggle button to switch between color schemes\r\n * @param {string} nextScheme The next scheme to switch to\r\n */\r\nfunction createColorSchemeToggle(nextScheme) {\r\n  // Icon and label based on next scheme\r\n  const iconAndLabel = nextScheme === 'yellow' \r\n    ? {\r\n        icon: '<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"yellow\" stroke=\"currentColor\"><circle cx=\"12\" cy=\"12\" r=\"10\"/></svg>',\r\n        label: 'Yellow Mode'\r\n      }\r\n    : {\r\n        icon: '<svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"white\" stroke=\"currentColor\"><circle cx=\"12\" cy=\"12\" r=\"10\"/></svg>',\r\n        label: 'White Mode'\r\n      };\r\n  \r\n  // Create toggle button\r\n  createControlButton(\r\n    'neuro-contrast-scheme-toggle',\r\n    iconAndLabel.label,\r\n    () => {\r\n      applyColorScheme(nextScheme);\r\n      document.getElementById('neuro-contrast-scheme-toggle').remove();\r\n      createColorSchemeToggle(nextScheme === 'yellow' ? 'white' : 'yellow');\r\n    },\r\n    {\r\n      position: 'top-right',\r\n      icon: iconAndLabel.icon,\r\n      tooltip: 'Switch to ' + iconAndLabel.label\r\n    }\r\n  );\r\n}\r\n\r\n/**\r\n * Apply YouTube-specific high contrast fixes\r\n * @param {string} websiteTheme - 'dark' or 'light'\r\n */\r\nfunction applyYouTubeSpecificFixes(websiteTheme) {\r\n  let ytFixCss = '';\r\n  \r\n  // Fix YouTube video controls\r\n  ytFixCss += '/* Fix YouTube video controls */\\n';\r\n  ytFixCss += 'body.neuro-high-contrast-mode .ytp-chrome-bottom {\\n';\r\n  ytFixCss += '  background-color: rgba(0, 0, 0, 0.8) !important;\\n';\r\n  ytFixCss += '}\\n\\n';\r\n  \r\n  // Fix YouTube sidebar\r\n  ytFixCss += '/* Fix YouTube sidebar */\\n';\r\n  ytFixCss += 'body.neuro-high-contrast-mode ytd-guide-entry-renderer {\\n';\r\n  ytFixCss += '  border-bottom: 1px solid currentColor !important;\\n';\r\n  ytFixCss += '}\\n\\n';\r\n  \r\n  // Fix YouTube thumbnails\r\n  ytFixCss += '/* Preserve YouTube thumbnails but add border */\\n';\r\n  ytFixCss += 'body.neuro-high-contrast-mode ytd-thumbnail {\\n';\r\n  ytFixCss += '  border: 2px solid currentColor !important;\\n';\r\n  ytFixCss += '}\\n\\n';\r\n  \r\n  // Apply YouTube-specific styles\r\n  createStyleElement('neuro-high-contrast-youtube', ytFixCss, 'high-contrast');\r\n}\r\n\r\n/**\r\n * Apply Google-specific high contrast fixes\r\n * @param {string} websiteTheme - 'dark' or 'light'\r\n */\r\nfunction applyGoogleSpecificFixes(websiteTheme) {\r\n  let googleFixCss = '';\r\n  \r\n  // Fix Google search box\r\n  googleFixCss += '/* Fix Google search box */\\n';\r\n  googleFixCss += 'body.neuro-high-contrast-mode .gLFyf {\\n';\r\n  googleFixCss += '  border: 2px solid currentColor !important;\\n';\r\n  googleFixCss += '  padding: 5px !important;\\n';\r\n  googleFixCss += '}\\n\\n';\r\n  \r\n  // Fix Google search results\r\n  googleFixCss += '/* Fix Google search results */\\n';\r\n  googleFixCss += 'body.neuro-high-contrast-mode .g {\\n';\r\n  googleFixCss += '  border-bottom: 1px solid currentColor !important;\\n';\r\n  googleFixCss += '  padding: 10px 0 !important;\\n';\r\n  googleFixCss += '}\\n\\n';\r\n  \r\n  // Apply Google-specific styles\r\n  createStyleElement('neuro-high-contrast-google', googleFixCss, 'high-contrast');\r\n}\r\n","// Common utilities for all modes\r\n\r\n/**\r\n * Loads a font from a URL if it's not already loaded\r\n * @param {string} fontName The name of the font\r\n * @param {string} fontUrl The URL to load the font from\r\n * @param {string} fontFormat The format of the font (e.g. 'woff', 'woff2')\r\n * @returns {HTMLElement} The created style element\r\n */\r\nexport function loadFont(fontName, fontUrl, fontFormat = 'woff2') {\r\n  // Check if font is already loaded\r\n  if (document.getElementById(`neuro-font-${fontName}`)) {\r\n    return null;\r\n  }\r\n  \r\n  // Create a style element with @font-face declaration\r\n  const fontStyle = document.createElement('style');\r\n  fontStyle.id = `neuro-font-${fontName}`;\r\n  fontStyle.setAttribute('data-neuro-customizer', 'font');\r\n  \r\n  // Add improved font loading with multiple fallback formats\r\n  if (fontFormat === 'stylesheet') {\r\n    // For Google Fonts or similar services that provide complete stylesheets\r\n    fontStyle.textContent = `@import url('${fontUrl}');`;\r\n  } else {\r\n    fontStyle.textContent = `\r\n      @font-face {\r\n        font-family: '${fontName}';\r\n        src: url('${fontUrl}') format('${fontFormat}');\r\n        font-weight: normal;\r\n        font-style: normal;\r\n        font-display: swap;\r\n      }\r\n    `;\r\n  }\r\n  \r\n  document.head.appendChild(fontStyle);\r\n  \r\n  // Also preload the font for faster rendering\r\n  const preloadLink = document.createElement('link');\r\n  preloadLink.rel = 'preload';\r\n  preloadLink.href = fontUrl;\r\n  preloadLink.as = fontFormat === 'stylesheet' ? 'style' : 'font';\r\n  preloadLink.setAttribute('data-neuro-customizer', 'font-preload');\r\n  document.head.appendChild(preloadLink);\r\n  \r\n  // Track elements for cleanup\r\n  if (!window.neuroCustomizerElements) {\r\n    window.neuroCustomizerElements = [];\r\n  }\r\n  window.neuroCustomizerElements.push(fontStyle, preloadLink);\r\n  \r\n  return fontStyle;\r\n}\r\n\r\n/**\r\n * Creates and appends a style element with custom CSS\r\n * @param {string} id The ID to give the style element\r\n * @param {string} css The CSS content to add\r\n * @param {string} mode The mode this style belongs to\r\n * @returns {HTMLElement} The created style element\r\n */\r\nexport function createStyleElement(id, css, mode) {\r\n  const styleElement = document.createElement('style');\r\n  styleElement.id = id;\r\n  styleElement.setAttribute('data-neuro-customizer', mode);\r\n  styleElement.textContent = css;\r\n  document.head.appendChild(styleElement);\r\n  return styleElement;\r\n}\r\n\r\n/**\r\n * Stores the original styles of elements to restore them later\r\n * @param {string} selector CSS selector for elements to store\r\n * @param {string} attribute The attribute to store original styles in\r\n */\r\nexport function storeOriginalStyles(selector, attribute = 'data-neuro-original-style') {\r\n  const elements = document.querySelectorAll(selector);\r\n  elements.forEach(element => {\r\n    if (!element.hasAttribute(attribute)) {\r\n      element.setAttribute(attribute, element.getAttribute('style') || '');\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Creates MutationObserver to handle dynamically added elements\r\n * @param {Function} callback Function to call when new elements are added\r\n * @returns {MutationObserver} The created observer\r\n */\r\nexport function createDynamicContentObserver(callback) {\r\n  const observer = new MutationObserver((mutations) => {\r\n    let shouldCallback = false;\r\n    \r\n    for (const mutation of mutations) {\r\n      if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {\r\n        shouldCallback = true;\r\n        break;\r\n      }\r\n    }\r\n    \r\n    if (shouldCallback) {\r\n      callback();\r\n    }\r\n  });\r\n  \r\n  // Start observing\r\n  observer.observe(document.body, {\r\n    childList: true,\r\n    subtree: true\r\n  });\r\n  \r\n  // Track observers for cleanup\r\n  if (!window.neuroCustomizerObservers) {\r\n    window.neuroCustomizerObservers = [];\r\n  }\r\n  window.neuroCustomizerObservers.push(observer);\r\n  \r\n  return observer;\r\n}\r\n\r\n/**\r\n * Gets user preference for animation (reduced or normal)\r\n * @returns {boolean} Whether user prefers reduced motion\r\n */\r\nexport function prefersReducedMotion() {\r\n  return window.matchMedia('(prefers-reduced-motion: reduce)').matches;\r\n}\r\n\r\n/**\r\n * Creates a control button to add to the page\r\n * @param {string} id Button ID\r\n * @param {string} label Button label\r\n * @param {Function} onClick Click handler\r\n * @param {Object} options Additional options (position, icon, etc)\r\n * @returns {HTMLElement} The created button\r\n */\r\nexport function createControlButton(id, label, onClick, options = {}) {\r\n  // Check if button already exists\r\n  const existingButton = document.getElementById(id);\r\n  if (existingButton) {\r\n    return existingButton;\r\n  }\r\n  \r\n  // Get theme for proper styling\r\n  const websiteTheme = window.neuroCustomizerContext?.websiteTheme || 'light';\r\n  \r\n  // Default options\r\n  const {\r\n    position = 'bottom-right',\r\n    icon = null,\r\n    tooltip = label,\r\n    size = 'medium'\r\n  } = options;\r\n  \r\n  // Create button\r\n  const button = document.createElement('button');\r\n  button.id = id;\r\n  button.setAttribute('data-neuro-customizer', 'control');\r\n  button.setAttribute('aria-label', tooltip);\r\n  button.setAttribute('title', tooltip);\r\n  \r\n  // Position mapping\r\n  const positions = {\r\n    'top-left': 'top: 20px; left: 20px;',\r\n    'top-right': 'top: 20px; right: 20px;',\r\n    'bottom-left': 'bottom: 20px; left: 20px;',\r\n    'bottom-right': 'bottom: 20px; right: 20px;'\r\n  };\r\n  \r\n  // Size mapping\r\n  const sizes = {\r\n    'small': 'padding: 8px; font-size: 14px;',\r\n    'medium': 'padding: 10px; font-size: 16px;',\r\n    'large': 'padding: 12px; font-size: 18px;'\r\n  };\r\n  \r\n  // Colors based on theme\r\n  const colors = websiteTheme === 'dark'\r\n    ? {\r\n        bg: 'rgba(50, 50, 60, 0.8)',\r\n        text: '#FFFFFF',\r\n        border: '#6366F1',\r\n        hover: 'rgba(70, 70, 80, 0.9)'\r\n      }\r\n    : {\r\n        bg: 'rgba(255, 255, 255, 0.8)',\r\n        text: '#333333',\r\n        border: '#6366F1',\r\n        hover: 'rgba(240, 240, 250, 0.9)'\r\n      };\r\n  \r\n  // Set styles\r\n  button.style.cssText = `\r\n    position: fixed;\r\n    ${positions[position]};\r\n    ${sizes[size]};\r\n    z-index: 999999;\r\n    background-color: ${colors.bg};\r\n    color: ${colors.text};\r\n    border: 2px solid ${colors.border};\r\n    border-radius: 8px;\r\n    cursor: pointer;\r\n    font-family: system-ui, -apple-system, BlinkMacSystemFont, sans-serif;\r\n    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);\r\n    transition: background-color 0.2s;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    gap: 8px;\r\n    backdrop-filter: blur(4px);\r\n  `;\r\n  \r\n  // Add hover effect\r\n  button.addEventListener('mouseover', () => {\r\n    button.style.backgroundColor = colors.hover;\r\n  });\r\n  \r\n  button.addEventListener('mouseout', () => {\r\n    button.style.backgroundColor = colors.bg;\r\n  });\r\n  \r\n  // Add icon if provided\r\n  if (icon) {\r\n    button.innerHTML = `${icon} ${label}`;\r\n  } else {\r\n    button.textContent = label;\r\n  }\r\n  \r\n  // Add click handler\r\n  button.addEventListener('click', onClick);\r\n  \r\n  // Add to page\r\n  document.body.appendChild(button);\r\n  \r\n  // Track for cleanup\r\n  if (!window.neuroCustomizerElements) {\r\n    window.neuroCustomizerElements = [];\r\n  }\r\n  window.neuroCustomizerElements.push(button);\r\n  \r\n  return button;\r\n}\r\n\r\n// The simplified createControlButton function has been removed \r\n// as it was a duplicate of the more comprehensive version above\r\n","// Website theme detection utilities\r\n\r\n/**\r\n * Detects whether the current website is using a dark or light theme\r\n * Uses multiple heuristics for more accurate detection\r\n * @returns {string} 'dark' or 'light'\r\n */\r\nexport function detectWebsiteTheme() {\r\n  try {\r\n    // Get body and main content background colors\r\n    const bodyStyles = window.getComputedStyle(document.body);\r\n    const bodyBgColor = bodyStyles.backgroundColor;\r\n    const bodyTextColor = bodyStyles.color;\r\n    \r\n    // Also check main content area if it exists\r\n    let mainContentBgColor = bodyBgColor;\r\n    let mainContentTextColor = bodyTextColor;\r\n    \r\n    // Try to find main content area for more accurate detection\r\n    const mainContentSelectors = [\r\n      'main',\r\n      '[role=\"main\"]',\r\n      '#content',\r\n      '.content',\r\n      'article',\r\n      '.main-content',\r\n      '#main-content'\r\n    ];\r\n    \r\n    for (const selector of mainContentSelectors) {\r\n      const mainContent = document.querySelector(selector);\r\n      if (mainContent) {\r\n        const mainStyles = window.getComputedStyle(mainContent);\r\n        // Only use if background color is explicitly set\r\n        if (mainStyles.backgroundColor && mainStyles.backgroundColor !== 'rgba(0, 0, 0, 0)') {\r\n          mainContentBgColor = mainStyles.backgroundColor;\r\n          mainContentTextColor = mainStyles.color;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Convert RGB/RGBA to brightness value (0-255)\r\n    const getBrightness = (color) => {\r\n      // Extract RGB values\r\n      const rgb = color.match(/\\d+/g);\r\n      if (!rgb || rgb.length < 3) return 128; // Default to middle if can't detect\r\n      \r\n      // Calculate brightness using improved formula\r\n      // Brightness = 0.299*R + 0.587*G + 0.114*B\r\n      return Math.round(\r\n        (0.299 * parseInt(rgb[0])) + \r\n        (0.587 * parseInt(rgb[1])) + \r\n        (0.114 * parseInt(rgb[2]))\r\n      );\r\n    };\r\n    \r\n    // Get brightness values\r\n    const bodyBgBrightness = getBrightness(bodyBgColor);\r\n    const bodyTextBrightness = getBrightness(bodyTextColor);\r\n    const mainBgBrightness = getBrightness(mainContentBgColor);\r\n    const mainTextBrightness = getBrightness(mainContentTextColor);\r\n    \r\n    // Special cases for common sites\r\n    if (isYouTube()) {\r\n      // Check for YouTube dark mode by looking for specific selectors\r\n      const ytDarkMode = document.documentElement.getAttribute('dark') === 'true';\r\n      if (ytDarkMode !== null) {\r\n        return ytDarkMode === 'true' ? 'dark' : 'light';\r\n      }\r\n      // Fallback to checking specific YouTube dark mode elements\r\n      const ytAppDark = document.querySelector('ytd-app[dark]');\r\n      if (ytAppDark) {\r\n        return ytAppDark.getAttribute('dark') === 'true' ? 'dark' : 'light';\r\n      }\r\n    }\r\n    \r\n    // Check meta theme-color tag\r\n    const metaThemeColor = document.querySelector('meta[name=\"theme-color\"]');\r\n    if (metaThemeColor) {\r\n      const themeColor = metaThemeColor.getAttribute('content');\r\n      if (themeColor) {\r\n        // If theme color is specified, check its brightness\r\n        const themeColorBrightness = getBrightness(themeColor);\r\n        if (themeColorBrightness < 128) {\r\n          return 'dark';\r\n        } else if (themeColorBrightness > 200) {\r\n          return 'light';\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Advanced heuristic: check common dark mode class names\r\n    const htmlElement = document.documentElement;\r\n    const bodyElement = document.body;\r\n    \r\n    const darkModeClasses = ['dark', 'dark-mode', 'darkmode', 'night-mode', 'nightmode', 'theme-dark', 'dark-theme'];\r\n    const hasDarkClass = darkModeClasses.some(className => \r\n      htmlElement.classList.contains(className) || bodyElement.classList.contains(className)\r\n    );\r\n    \r\n    if (hasDarkClass) {\r\n      return 'dark';\r\n    }\r\n    \r\n    // Check for light mode classes too\r\n    const lightModeClasses = ['light', 'light-mode', 'lightmode', 'day-mode', 'daymode', 'theme-light', 'light-theme'];\r\n    const hasLightClass = lightModeClasses.some(className => \r\n      htmlElement.classList.contains(className) || bodyElement.classList.contains(className)\r\n    );\r\n    \r\n    if (hasLightClass) {\r\n      return 'light';\r\n    }\r\n    \r\n    // Use content area brightness as primary indicator if available\r\n    if (mainBgBrightness !== bodyBgBrightness) {\r\n      return mainBgBrightness < 128 ? 'dark' : 'light';\r\n    }\r\n    \r\n    // Use body as fallback\r\n    return bodyBgBrightness < 128 ? 'dark' : 'light';\r\n  } catch (error) {\r\n    console.error('Error detecting website theme:', error);\r\n    return 'light'; // Default to light if detection fails\r\n  }\r\n}\r\n\r\n/**\r\n * Determines if the current website is YouTube\r\n * @returns {boolean}\r\n */\r\nexport function isYouTube() {\r\n  return window.location.hostname.includes('youtube.com');\r\n}\r\n\r\n/**\r\n * Gets site-specific optimized settings for known websites\r\n * @returns {Object} Site-specific settings\r\n */\r\nexport function getSiteSpecificSettings() {\r\n  const hostname = window.location.hostname;\r\n  \r\n  // YouTube-specific settings\r\n  if (hostname.includes('youtube.com')) {\r\n    return {\r\n      sidebarSelector: 'ytd-guide-renderer, tp-yt-app-drawer',\r\n      contentSelector: 'ytd-page-manager',\r\n      isDynamic: true,\r\n      adSelectors: [\r\n        'ytd-display-ad-renderer',\r\n        'ytd-ad-slot-renderer',\r\n        'ytd-in-feed-ad-layout-renderer'\r\n      ],\r\n      preserveElements: [\r\n        // Video player\r\n        'video',\r\n        '.html5-video-container',\r\n        'ytd-player',\r\n        '.ytp-cued-thumbnail-overlay',\r\n        // Sidebar and navigation\r\n        '#guide-content',\r\n        'ytd-mini-guide-renderer',\r\n        'ytd-guide-section-renderer',\r\n        'ytd-guide-entry-renderer',\r\n        // Thumbnails\r\n        'ytd-thumbnail',\r\n        'ytd-playlist-thumbnail',\r\n        'yt-img-shadow'\r\n      ],\r\n      excludeFromHighContrast: [\r\n        'ytd-thumbnail',\r\n        'ytd-playlist-thumbnail',\r\n        'img[src*=\"ytimg\"]',\r\n        'yt-img-shadow img',\r\n        '.ytp-videowall-still',\r\n        'video',\r\n        '.html5-video-container'\r\n      ],\r\n      fixStyles: {\r\n        sidebar: `\r\n          #guide-content {\r\n            background-color: inherit !important;\r\n          }\r\n          ytd-guide-entry-renderer, \r\n          ytd-guide-section-renderer {\r\n            background-color: transparent !important;\r\n          }\r\n          ytd-mini-guide-renderer {\r\n            background-color: inherit !important;\r\n          }\r\n        `,\r\n        playerControls: `\r\n          .ytp-chrome-bottom {\r\n            background-color: rgba(0, 0, 0, 0.5) !important;\r\n          }\r\n          .ytp-chrome-controls button,\r\n          .ytp-time-display {\r\n            background-color: transparent !important;\r\n          }\r\n        `\r\n      }\r\n    };\r\n  }\r\n  \r\n  // Google sites\r\n  if (hostname.includes('google.com')) {\r\n    return {\r\n      isDynamic: true,\r\n      preserveElements: [\r\n        '.gb_Vd', // Google menu\r\n        '.hdtb-mitem', // Search filters\r\n        'img', // Images\r\n        'g-img', // Google images\r\n        '.kno-fv', // Knowledge panel images\r\n      ],\r\n      fixStyles: {\r\n        searchBox: `\r\n          .gLFyf {\r\n            background-color: inherit !important;\r\n            border: 1px solid currentColor !important;\r\n          }\r\n        `\r\n      }\r\n    };\r\n  }\r\n  \r\n  // Default settings for other sites\r\n  return {    isDynamic: false,\r\n    preserveElements: [\r\n      'img',\r\n      'video',\r\n      'svg',\r\n      'canvas',\r\n      'iframe',\r\n      '[role=\"img\"]'\r\n    ]\r\n  };\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// Content script for Neurodiversity Web Customizer\r\n// This will be injected into web pages to apply the selected visual mode\r\n\r\nimport { applyDyslexiaMode } from './modes/dyslexia';\r\nimport { applyFocusMode } from './modes/focus';\r\nimport { applyHighContrastMode } from './modes/highContrast';\r\nimport { applyCalmMode } from './modes/calm';\r\nimport { resetToDefaultMode } from './modes/default';\r\nimport { detectWebsiteTheme, getSiteSpecificSettings } from './utils/themeDetection';\r\n\r\n// Check if a mode is already active on this page\r\nlet currentMode = null;\r\nlet websiteTheme = 'light';\r\nlet siteSettings = {};\r\n\r\n// Initialize and detect website theme\r\nfunction initialize() {\r\n  // Detect website theme (dark or light)\r\n  websiteTheme = detectWebsiteTheme();\r\n  console.log('Detected website theme:', websiteTheme);\r\n  \r\n  // Get site-specific settings\r\n  siteSettings = getSiteSpecificSettings();\r\n  \r\n  // Store theme and site settings in window for modes to access\r\n  window.neuroCustomizerContext = {\r\n    websiteTheme,\r\n    siteSettings,\r\n    systemPrefersDark: window.matchMedia('(prefers-color-scheme: dark)').matches\r\n  };\r\n  \r\n  // Listen for theme changes (system or website)\r\n  window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', event => {\r\n    window.neuroCustomizerContext.systemPrefersDark = event.matches;\r\n    \r\n    // If a mode is active, reapply it to adapt to new system preference\r\n    if (currentMode) {\r\n      // Re-detect website theme as it might have changed\r\n      window.neuroCustomizerContext.websiteTheme = detectWebsiteTheme();\r\n      applyMode(currentMode);\r\n    }\r\n  });\r\n  \r\n  // Check if we should apply a saved mode\r\n  chrome.runtime.sendMessage({ action: 'getModeStatus' }, (response) => {\r\n    if (response && response.activeMode && response.activeMode !== 'default') {\r\n      applyMode(response.activeMode);\r\n    }\r\n  });\r\n  \r\n  // For dynamic sites, periodically check if theme has changed\r\n  if (siteSettings.isDynamic) {\r\n    setInterval(() => {\r\n      const newTheme = detectWebsiteTheme();\r\n      if (newTheme !== window.neuroCustomizerContext.websiteTheme) {\r\n        window.neuroCustomizerContext.websiteTheme = newTheme;\r\n        console.log('Website theme changed to:', newTheme);\r\n        \r\n        // Reapply current mode if active\r\n        if (currentMode) {\r\n          applyMode(currentMode);\r\n        }\r\n      }\r\n    }, 2000); // Check every 2 seconds\r\n  }\r\n}\r\n\r\n// Run initialization\r\ninitialize();\r\n\r\n// Listen for messages from popup or background\r\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\r\n  if (request.action === 'applyMode') {\r\n    applyMode(request.mode);\r\n    sendResponse({ success: true });\r\n    return true;\r\n  } else if (request.action === 'getCurrentMode') {\r\n    sendResponse({ \r\n      currentMode: currentMode || 'default',\r\n      websiteTheme: window.neuroCustomizerContext.websiteTheme\r\n    });\r\n    return true;\r\n  }\r\n  return true;\r\n});\r\n\r\n// Function to apply the selected mode\r\nfunction applyMode(mode) {\r\n  // First, remove any existing mode\r\n  if (currentMode) {\r\n    resetToDefaultMode();\r\n  }\r\n  \r\n  // Apply the requested mode\r\n  switch (mode) {\r\n    case 'dyslexia':\r\n      applyDyslexiaMode();\r\n      break;\r\n    case 'focus':\r\n      applyFocusMode();\r\n      break;\r\n    case 'high-contrast':\r\n      applyHighContrastMode();\r\n      break;\r\n    case 'calm':\r\n      applyCalmMode();\r\n      break;\r\n    case 'default':\r\n    default:\r\n      // Already reset above\r\n      break;\r\n  }\r\n  \r\n  // Update current mode\r\n  currentMode = mode === 'default' ? null : mode;\r\n}\r\n"],"names":[],"sourceRoot":""}