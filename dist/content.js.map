{"version":3,"file":"content.js","mappings":";;;;;;;;;;;;;;AAAA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAuGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;AChIA;;AAEA;AACA;AACA;AACA;AAAA;AAAA;;AAEA;AACA;;AAOA;AACA;AACA;AAAA;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AACA;;;;;;;;;;;;;;AC5DA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAgEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;ACxFA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AA8GA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAeA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;;;;;;;;;;;;;;ACrNA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AA6HA;AACA;AACA;AACA;AACA;AACA;AAmCA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAcA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAwEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;ACrUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACNA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","sources":["webpack://neurodiversity-customizer/./src/content/modes/calm.js","webpack://neurodiversity-customizer/./src/content/modes/default.js","webpack://neurodiversity-customizer/./src/content/modes/dyslexia.js","webpack://neurodiversity-customizer/./src/content/modes/focus.js","webpack://neurodiversity-customizer/./src/content/modes/highContrast.js","webpack://neurodiversity-customizer/webpack/bootstrap","webpack://neurodiversity-customizer/webpack/runtime/define property getters","webpack://neurodiversity-customizer/webpack/runtime/hasOwnProperty shorthand","webpack://neurodiversity-customizer/webpack/runtime/make namespace object","webpack://neurodiversity-customizer/./src/content/index.js"],"sourcesContent":["// Calm/Low-Stimulation Mode (Autism-Friendly) implementation\r\n\r\nexport function applyCalmMode() {\r\n  // Add a class to the body\r\n  document.body.classList.add('neuro-calm-mode');\r\n  \r\n  // Create a style element\r\n  const styleElement = document.createElement('style');\r\n  styleElement.setAttribute('data-neuro-customizer', 'calm');\r\n  \r\n  // CSS for calm/low-stimulation mode\r\n  styleElement.textContent = `\r\n    /* Soft color palette */\r\n    body.neuro-calm-mode {\r\n      background-color: #F0F3F6 !important;\r\n      color: #333 !important;\r\n      filter: saturate(85%) !important;\r\n      transition: none !important;\r\n    }\r\n    \r\n    /* Apply softer colors to all elements */\r\n    body.neuro-calm-mode * {\r\n      animation: none !important;\r\n      transition: none !important;\r\n    }\r\n    \r\n    /* Muted text */\r\n    body.neuro-calm-mode h1,\r\n    body.neuro-calm-mode h2,\r\n    body.neuro-calm-mode h3,\r\n    body.neuro-calm-mode h4,\r\n    body.neuro-calm-mode h5,\r\n    body.neuro-calm-mode h6,\r\n    body.neuro-calm-mode p,\r\n    body.neuro-calm-mode li,\r\n    body.neuro-calm-mode span {\r\n      color: #404040 !important;\r\n      font-weight: normal !important;\r\n      text-shadow: none !important;\r\n    }\r\n    \r\n    /* Soften backgrounds */\r\n    body.neuro-calm-mode div,\r\n    body.neuro-calm-mode section,\r\n    body.neuro-calm-mode article,\r\n    body.neuro-calm-mode aside,\r\n    body.neuro-calm-mode nav {\r\n      background-image: none !important;\r\n      box-shadow: none !important;\r\n    }\r\n    \r\n    /* Remove or reduce busy backgrounds */\r\n    body.neuro-calm-mode [style*=\"background-image\"] {\r\n      background-image: none !important;\r\n      background-color: #F0F3F6 !important;\r\n    }\r\n    \r\n    /* Reduce font boldness */\r\n    body.neuro-calm-mode strong,\r\n    body.neuro-calm-mode b {\r\n      font-weight: normal !important;\r\n    }\r\n    \r\n    /* Enlarge clickable elements */\r\n    body.neuro-calm-mode a,\r\n    body.neuro-calm-mode button,\r\n    body.neuro-calm-mode input[type=\"button\"],\r\n    body.neuro-calm-mode input[type=\"submit\"] {\r\n      padding: 0.5em !important;\r\n      margin: 0.3em !important;\r\n      border-radius: 4px !important;\r\n    }\r\n    \r\n    /* Suppress hover effects */\r\n    body.neuro-calm-mode a:hover,\r\n    body.neuro-calm-mode button:hover,\r\n    body.neuro-calm-mode *:hover {\r\n      transform: none !important;\r\n      filter: none !important;\r\n      background-image: none !important;\r\n    }\r\n    \r\n    /* Soften links */\r\n    body.neuro-calm-mode a:link,\r\n    body.neuro-calm-mode a:visited {\r\n      color: #2A5D8A !important;\r\n      text-decoration: underline !important;\r\n    }\r\n    \r\n    /* Suppress blinking or flashing elements */\r\n    body.neuro-calm-mode [class*=\"blink\"],\r\n    body.neuro-calm-mode [class*=\"flash\"],\r\n    body.neuro-calm-mode [class*=\"alert\"] {\r\n      animation: none !important;\r\n      opacity: 0.8 !important;\r\n    }\r\n    \r\n    /* Clearly separate UI elements */\r\n    body.neuro-calm-mode button,\r\n    body.neuro-calm-mode input,\r\n    body.neuro-calm-mode select,\r\n    body.neuro-calm-mode textarea {\r\n      margin: 0.5em !important;\r\n      border: 1px solid #AAAAAA !important;\r\n    }\r\n    \r\n    /* Reduce contrast for images */\r\n    body.neuro-calm-mode img,\r\n    body.neuro-calm-mode video {\r\n      opacity: 0.9 !important;\r\n      filter: saturate(90%) brightness(105%) !important;\r\n    }\r\n  `;\r\n  \r\n  // Append the style element to the document head\r\n  document.head.appendChild(styleElement);\r\n  \r\n  // Store original styles for elements we'll modify\r\n  const elementsToModify = document.querySelectorAll('[style*=\"animation\"], [style*=\"transition\"], [style*=\"blink\"], [style*=\"flash\"]');\r\n  elementsToModify.forEach(element => {\r\n    if (!element.hasAttribute('data-neuro-original-style')) {\r\n      element.setAttribute('data-neuro-original-style', element.getAttribute('style') || '');\r\n      element.style.animation = 'none';\r\n      element.style.transition = 'none';\r\n    }\r\n  });\r\n  \r\n  console.log('Calm/low-stimulation mode applied');\r\n}\r\n","// Default mode implementation - resets to original page styles\r\n\r\nexport function resetToDefaultMode() {\r\n  // Remove any style elements we've added\r\n  const customStyles = document.querySelectorAll('style[data-neuro-customizer]');\r\n  customStyles.forEach(style => style.remove());\r\n  \r\n  // Remove any classes we've added to the body\r\n  document.body.classList.remove(\r\n    'neuro-dyslexia-mode',\r\n    'neuro-focus-mode',\r\n    'neuro-high-contrast-mode',\r\n    'neuro-calm-mode'\r\n  );\r\n  \r\n  // Remove any observer or event listeners we've added\r\n  if (window.neuroCustomizerObservers) {\r\n    window.neuroCustomizerObservers.forEach(observer => observer.disconnect());\r\n    window.neuroCustomizerObservers = [];\r\n  }\r\n  \r\n  // Remove any custom elements we've added (buttons, tooltips, etc.)\r\n  if (window.neuroCustomizerElements) {\r\n    window.neuroCustomizerElements.forEach(element => {\r\n      if (element && element.parentNode) {\r\n        element.remove();\r\n      }\r\n    });\r\n    window.neuroCustomizerElements = [];\r\n  }\r\n  \r\n  // Remove any inline styles we've added\r\n  const elementsWithInlineStyles = document.querySelectorAll('[data-neuro-original-style]');\r\n  elementsWithInlineStyles.forEach(element => {\r\n    const originalStyle = element.getAttribute('data-neuro-original-style');\r\n    element.setAttribute('style', originalStyle || '');\r\n    element.removeAttribute('data-neuro-original-style');\r\n  });\r\n  \r\n  // Remove specific UI elements by ID\r\n  const elementsToRemove = [\r\n    'neuro-reading-ruler',\r\n    'neuro-keyboard-hint',\r\n    'neuro-high-contrast-toggle',\r\n    'neuro-high-contrast-yellow-mode',\r\n    'neuro-focus-highlight'\r\n  ];\r\n  \r\n  elementsToRemove.forEach(id => {\r\n    const element = document.getElementById(id);\r\n    if (element) {\r\n      element.remove();\r\n    }\r\n  });\r\n  \r\n  // Also remove any elements with data-neuro-customizer attribute\r\n  const customElements = document.querySelectorAll('[data-neuro-customizer]');\r\n  customElements.forEach(element => element.remove());\r\n  \r\n  console.log('Reset to default mode complete');\r\n}\r\n","// Dyslexia-friendly mode implementation\r\n\r\nexport function applyDyslexiaMode() {\r\n  // Add a class to the body for potential CSS selectors\r\n  document.body.classList.add('neuro-dyslexia-mode');\r\n  \r\n  // Create a style element\r\n  const styleElement = document.createElement('style');\r\n  styleElement.setAttribute('data-neuro-customizer', 'dyslexia');\r\n  \r\n  // CSS for dyslexia-friendly mode\r\n  styleElement.textContent = `\r\n    /* Apply OpenDyslexic font to all text elements */\r\n    body.neuro-dyslexia-mode {\r\n      font-family: 'OpenDyslexic', 'Lexend', sans-serif !important;\r\n    }\r\n    \r\n    body.neuro-dyslexia-mode * {\r\n      font-family: 'OpenDyslexic', 'Lexend', sans-serif !important;\r\n      font-style: normal !important; /* No italics */\r\n    }\r\n    \r\n    /* Increase letter spacing */\r\n    body.neuro-dyslexia-mode p, \r\n    body.neuro-dyslexia-mode li, \r\n    body.neuro-dyslexia-mode h1,\r\n    body.neuro-dyslexia-mode h2,\r\n    body.neuro-dyslexia-mode h3,\r\n    body.neuro-dyslexia-mode h4,\r\n    body.neuro-dyslexia-mode h5,\r\n    body.neuro-dyslexia-mode h6,\r\n    body.neuro-dyslexia-mode span,\r\n    body.neuro-dyslexia-mode div {\r\n      letter-spacing: 0.05em !important;\r\n      word-spacing: 0.1em !important;\r\n      line-height: 1.5 !important;\r\n    }\r\n    \r\n    /* Improve paragraphs and text blocks */\r\n    body.neuro-dyslexia-mode p,\r\n    body.neuro-dyslexia-mode div {\r\n      line-height: 1.8 !important;\r\n      margin-bottom: 1.2em !important;\r\n    }\r\n    \r\n    /* Ensure text has a clean background */\r\n    body.neuro-dyslexia-mode p,\r\n    body.neuro-dyslexia-mode li,\r\n    body.neuro-dyslexia-mode h1,\r\n    body.neuro-dyslexia-mode h2,\r\n    body.neuro-dyslexia-mode h3,\r\n    body.neuro-dyslexia-mode h4,\r\n    body.neuro-dyslexia-mode h5,\r\n    body.neuro-dyslexia-mode h6 {\r\n      background-color: transparent !important;\r\n      padding: 0.1em 0 !important;\r\n    }\r\n    \r\n    /* Ensure sufficient contrast for text */\r\n    body.neuro-dyslexia-mode * {\r\n      text-shadow: none !important;\r\n    }\r\n\r\n    /* Simplify backgrounds behind text */\r\n    body.neuro-dyslexia-mode article,\r\n    body.neuro-dyslexia-mode section,\r\n    body.neuro-dyslexia-mode main,\r\n    body.neuro-dyslexia-mode .content,\r\n    body.neuro-dyslexia-mode [role=\"main\"],\r\n    body.neuro-dyslexia-mode [role=\"article\"] {\r\n      background-image: none !important;\r\n      background-color: inherit !important;\r\n    }\r\n  `;\r\n  \r\n  // Append the style element to the document head\r\n  document.head.appendChild(styleElement);\r\n  \r\n  // Load OpenDyslexic font if not already loaded\r\n  if (!document.getElementById('neuro-dyslexic-font')) {\r\n    const fontLink = document.createElement('link');\r\n    fontLink.id = 'neuro-dyslexic-font';\r\n    fontLink.rel = 'stylesheet';\r\n    fontLink.href = 'https://cdn.jsdelivr.net/npm/open-dyslexic@1.0.3/open-dyslexic-regular.woff';\r\n    document.head.appendChild(fontLink);\r\n  }\r\n  \r\n  console.log('Dyslexia-friendly mode applied');\r\n}\r\n","// Focus mode (ADHD/Attention Support) implementation\r\n\r\nexport function applyFocusMode() {\r\n  // Add a class to the body\r\n  document.body.classList.add('neuro-focus-mode');\r\n  \r\n  // Create a style element\r\n  const styleElement = document.createElement('style');\r\n  styleElement.setAttribute('data-neuro-customizer', 'focus');\r\n  \r\n  // CSS for focus mode - redesigned to be more subtle and practical\r\n  styleElement.textContent = `\r\n    /* Base styles */\r\n    body.neuro-focus-mode {\r\n      overflow-x: hidden !important;\r\n    }\r\n    \r\n    /* Improved paragraph readability - subtle improvements to text */\r\n    body.neuro-focus-mode p,\r\n    body.neuro-focus-mode li,\r\n    body.neuro-focus-mode h1,\r\n    body.neuro-focus-mode h2,\r\n    body.neuro-focus-mode h3,\r\n    body.neuro-focus-mode h4,\r\n    body.neuro-focus-mode h5,\r\n    body.neuro-focus-mode h6 {\r\n      line-height: 1.6 !important;\r\n      max-width: 70ch !important; /* Optimum reading width */\r\n      margin-left: auto !important;\r\n      margin-right: auto !important;\r\n    }\r\n    \r\n    /* Subtle paragraph spacing for improved focus */\r\n    body.neuro-focus-mode p,\r\n    body.neuro-focus-mode li {\r\n      margin-bottom: 1.2em !important;\r\n      padding-left: 0.5em !important;\r\n      border-left: 3px solid rgba(99, 102, 241, 0.1) !important; /* Very subtle left border */\r\n    }\r\n    \r\n    /* Current paragraph highlight when hovered */\r\n    body.neuro-focus-mode p:hover,\r\n    body.neuro-focus-mode li:hover {\r\n      background-color: rgba(99, 102, 241, 0.05) !important;\r\n      border-left-color: rgba(99, 102, 241, 0.5) !important;\r\n    }\r\n    \r\n    /* Reduce animation distractions without breaking functionality */\r\n    body.neuro-focus-mode * {\r\n      animation-duration: 0.1s !important; /* Shortens animations rather than removing them */\r\n    }\r\n    \r\n    /* Subtly reduce visual prominence of likely distracting elements */\r\n    body.neuro-focus-mode aside,\r\n    body.neuro-focus-mode [role=\"complementary\"],\r\n    body.neuro-focus-mode nav:not([aria-label=\"breadcrumb\"]):not([aria-label=\"Breadcrumb\"]),\r\n    body.neuro-focus-mode [role=\"banner\"],\r\n    body.neuro-focus-mode [role=\"navigation\"],\r\n    body.neuro-focus-mode footer,\r\n    body.neuro-focus-mode [role=\"contentinfo\"] {\r\n      opacity: 0.75 !important;\r\n      filter: grayscale(30%) !important;\r\n      transition: opacity 0.2s ease, filter 0.2s ease !important;\r\n    }\r\n    \r\n    /* Restore on hover/focus */\r\n    body.neuro-focus-mode aside:hover,\r\n    body.neuro-focus-mode [role=\"complementary\"]:hover,\r\n    body.neuro-focus-mode nav:hover,\r\n    body.neuro-focus-mode [role=\"banner\"]:hover,\r\n    body.neuro-focus-mode [role=\"navigation\"]:hover,\r\n    body.neuro-focus-mode footer:hover,\r\n    body.neuro-focus-mode [role=\"contentinfo\"]:hover,\r\n    body.neuro-focus-mode aside:focus-within,\r\n    body.neuro-focus-mode [role=\"complementary\"]:focus-within,\r\n    body.neuro-focus-mode nav:focus-within,\r\n    body.neuro-focus-mode [role=\"banner\"]:focus-within,\r\n    body.neuro-focus-mode [role=\"navigation\"]:focus-within,\r\n    body.neuro-focus-mode footer:focus-within,\r\n    body.neuro-focus-mode [role=\"contentinfo\"]:focus-within {\r\n      opacity: 1 !important;\r\n      filter: none !important;\r\n    }\r\n    \r\n    /* Only target actual ads, not general images */\r\n    body.neuro-focus-mode iframe[src*=\"ad.doubleclick\"],\r\n    body.neuro-focus-mode iframe[src*=\"googleadservices\"],\r\n    body.neuro-focus-mode div[id^=\"div-gpt-ad\"],\r\n    body.neuro-focus-mode div[data-ad],\r\n    body.neuro-focus-mode div[class^=\"AdTheme\"] {\r\n      opacity: 0.3 !important;\r\n    }\r\n    \r\n    /* Only reduce distraction from autoplaying videos, not all videos */\r\n    body.neuro-focus-mode video[autoplay],\r\n    body.neuro-focus-mode video[data-autoplay=\"true\"] {\r\n      opacity: 0.4 !important;\r\n    }\r\n    \r\n    /* Improve visibility of videos on hover */\r\n    body.neuro-focus-mode video:hover {\r\n      opacity: 1 !important;\r\n      filter: none !important;\r\n    }\r\n    \r\n    /* Reading ruler styles - improved contrast and visibility */\r\n    #neuro-reading-ruler {\r\n      position: fixed;\r\n      left: 0;\r\n      width: 100%;\r\n      height: 32px;\r\n      background-color: rgba(99, 102, 241, 0.05);\r\n      border-top: 1px solid rgba(99, 102, 241, 0.3);\r\n      border-bottom: 1px solid rgba(99, 102, 241, 0.3);\r\n      pointer-events: none;\r\n      z-index: 9999;\r\n      box-shadow: 0 0 8px 8px rgba(99, 102, 241, 0.02);\r\n      transition: top 0.1s ease;\r\n    }\r\n  `;\r\n  \r\n  // Append the style element to the document head\r\n  document.head.appendChild(styleElement);\r\n    // Create reading ruler element\r\n  const readingRuler = document.createElement('div');\r\n  readingRuler.id = 'neuro-reading-ruler';\r\n  readingRuler.style.top = '100px';\r\n  document.body.appendChild(readingRuler);\r\n  \r\n  // Reading ruler follows mouse with a smoother experience\r\n  const updateRulerPosition = (e) => {\r\n    if (!e || !e.clientY) return; // Skip if no valid event\r\n    \r\n    // Get current ruler position\r\n    const currentTop = parseInt(readingRuler.style.top) || 0;\r\n    \r\n    // Calculate new position with slight smoothing (avoid jarring movements)\r\n    const targetTop = e.clientY;\r\n    const newTop = currentTop + (targetTop - currentTop) * 0.3; // Smooth easing\r\n    \r\n    // Apply the new position\r\n    readingRuler.style.top = `${newTop}px`;\r\n  };\r\n  \r\n  // Add mousemove listener for reading ruler\r\n  document.addEventListener('mousemove', updateRulerPosition);\r\n  \r\n  // Add alternate keyboard control for the reading ruler\r\n  document.addEventListener('keydown', (e) => {\r\n    // Allow moving the reading ruler with arrow keys\r\n    if (e.key === 'ArrowUp' || e.key === 'ArrowDown') {\r\n      // Only handle if no input element is focused\r\n      if (document.activeElement.tagName !== 'INPUT' && \r\n          document.activeElement.tagName !== 'TEXTAREA' &&\r\n          !document.activeElement.isContentEditable) {\r\n        \r\n        e.preventDefault(); // Prevent page scrolling\r\n        \r\n        // Get current position\r\n        const currentTop = parseInt(readingRuler.style.top) || 0;\r\n        \r\n        // Move up or down by 20px\r\n        const newTop = currentTop + (e.key === 'ArrowDown' ? 20 : -20);\r\n        readingRuler.style.top = `${newTop}px`;\r\n      }\r\n    }\r\n  });\r\n  \r\n  // Store the observers to remove them later\r\n  if (!window.neuroCustomizerObservers) {\r\n    window.neuroCustomizerObservers = [];\r\n  }\r\n  \r\n  window.neuroCustomizerObservers.push({\r\n    disconnect: () => {\r\n      document.removeEventListener('mousemove', updateRulerPosition);\r\n      document.removeEventListener('keydown', (e) => {\r\n        if (e.key === 'ArrowUp' || e.key === 'ArrowDown') {\r\n          e.preventDefault();\r\n        }\r\n      });\r\n    }\r\n  });\r\n  \r\n  // Add hint tooltip for keyboard controls\r\n  const keyboardHintTooltip = document.createElement('div');\r\n  keyboardHintTooltip.id = 'neuro-keyboard-hint';\r\n  keyboardHintTooltip.style.cssText = `\r\n    position: fixed;\r\n    bottom: 20px;\r\n    right: 20px;\r\n    padding: 10px 15px;\r\n    background-color: rgba(79, 70, 229, 0.1);\r\n    border: 1px solid rgba(79, 70, 229, 0.3);\r\n    border-radius: 4px;\r\n    font-size: 12px;\r\n    color: #4f46e5;\r\n    z-index: 9999;\r\n    pointer-events: none;\r\n    opacity: 0.9;\r\n    transition: opacity 0.3s ease;\r\n  `;\r\n  keyboardHintTooltip.textContent = 'Tip: Use ↑/↓ keys to move reading ruler';\r\n  document.body.appendChild(keyboardHintTooltip);\r\n  \r\n  // Hide the tooltip after 8 seconds\r\n  setTimeout(() => {\r\n    keyboardHintTooltip.style.opacity = '0';\r\n    // Remove from DOM after fade out\r\n    setTimeout(() => keyboardHintTooltip.remove(), 300);\r\n  }, 8000);\r\n  \r\n  console.log('Improved Focus mode applied');\r\n}\r\n","// High Contrast Mode implementation\r\n\r\nexport function applyHighContrastMode() {\r\n  // Add a class to the body\r\n  document.body.classList.add('neuro-high-contrast-mode');\r\n    // Create a style element\r\n  const styleElement = document.createElement('style');\r\n  styleElement.setAttribute('data-neuro-customizer', 'high-contrast');\r\n  \r\n  // Improved CSS for high contrast mode\r\n  styleElement.textContent = `\r\n    /* Basic high contrast for body */\r\n    body.neuro-high-contrast-mode {\r\n      background-color: black !important;\r\n      color: white !important;\r\n    }\r\n    \r\n    /* Text elements - more targeted selectors */\r\n    body.neuro-high-contrast-mode h1,\r\n    body.neuro-high-contrast-mode h2,\r\n    body.neuro-high-contrast-mode h3,\r\n    body.neuro-high-contrast-mode h4,\r\n    body.neuro-high-contrast-mode h5,\r\n    body.neuro-high-contrast-mode h6,\r\n    body.neuro-high-contrast-mode p,\r\n    body.neuro-high-contrast-mode li,\r\n    body.neuro-high-contrast-mode dt,\r\n    body.neuro-high-contrast-mode dd,\r\n    body.neuro-high-contrast-mode label,\r\n    body.neuro-high-contrast-mode figcaption {\r\n      color: white !important;\r\n      text-shadow: none !important;\r\n    }\r\n    \r\n    /* More selective background color application */\r\n    body.neuro-high-contrast-mode article,\r\n    body.neuro-high-contrast-mode section,\r\n    body.neuro-high-contrast-mode nav,\r\n    body.neuro-high-contrast-mode aside,\r\n    body.neuro-high-contrast-mode header,\r\n    body.neuro-high-contrast-mode footer,\r\n    body.neuro-high-contrast-mode main {\r\n      background-color: black !important;\r\n    }\r\n    \r\n    /* Links */\r\n    body.neuro-high-contrast-mode a:link,\r\n    body.neuro-high-contrast-mode a:visited {\r\n      color: yellow !important;\r\n      text-decoration: underline !important;\r\n    }\r\n    \r\n    body.neuro-high-contrast-mode a:hover,\r\n    body.neuro-high-contrast-mode a:active {\r\n      color: #FFFF66 !important;\r\n      background-color: #333 !important;\r\n    }\r\n    \r\n    /* Remove subtle visual effects but preserve images */\r\n    body.neuro-high-contrast-mode * {\r\n      text-shadow: none !important;\r\n      box-shadow: none !important;\r\n    }\r\n    \r\n    /* Only remove decorative background images, not content images */\r\n    body.neuro-high-contrast-mode header,\r\n    body.neuro-high-contrast-mode footer,\r\n    body.neuro-high-contrast-mode nav,\r\n    body.neuro-high-contrast-mode aside {\r\n      background-image: none !important;\r\n    }\r\n    \r\n    /* Increase font size slightly */\r\n    body.neuro-high-contrast-mode {\r\n      font-size: 110% !important;\r\n    }\r\n    \r\n    /* Buttons and form elements */\r\n    body.neuro-high-contrast-mode button,\r\n    body.neuro-high-contrast-mode input,\r\n    body.neuro-high-contrast-mode select,\r\n    body.neuro-high-contrast-mode textarea {\r\n      border: 2px solid white !important;\r\n      background-color: black !important;\r\n      color: white !important;\r\n    }\r\n    \r\n    /* Ensure form elements are clearly visible */\r\n    body.neuro-high-contrast-mode input:focus,\r\n    body.neuro-high-contrast-mode select:focus,\r\n    body.neuro-high-contrast-mode textarea:focus,\r\n    body.neuro-high-contrast-mode button:focus {\r\n      outline: 3px solid yellow !important;\r\n    }\r\n    \r\n    /* Improved image handling - more gentle approach */\r\n    body.neuro-high-contrast-mode img,body.neuro-high-contrast-mode svg {\r\n      /* Only apply minimal contrast enhancement */\r\n      filter: contrast(105%) !important;\r\n      /* Don't override position to prevent layout issues */\r\n      z-index: auto !important;\r\n      /* Preserve original dimensions */\r\n      max-width: 100% !important;\r\n      height: auto !important;\r\n    }\r\n      /* Target background-size property to prevent image cutoff */\r\n    body.neuro-high-contrast-mode [style*=\"background-size\"] {\r\n      background-size: auto !important;\r\n    }\r\n    \r\n    /* Video elements - more gentle treatment */\r\n    body.neuro-high-contrast-mode video,\r\n    body.neuro-high-contrast-mode canvas {\r\n      border: 1px solid white !important;\r\n    }\r\n    \r\n    /* Tables */\r\n    body.neuro-high-contrast-mode table,\r\n    body.neuro-high-contrast-mode th,\r\n    body.neuro-high-contrast-mode td {\r\n      border: 2px solid white !important;\r\n    }\r\n    \r\n    body.neuro-high-contrast-mode th {\r\n      background-color: #333 !important;\r\n      color: white !important;\r\n    }\r\n      /* Alternative mode: black on yellow */\r\n    body.neuro-high-contrast-mode .alt-contrast,\r\n    body.neuro-high-contrast-mode [data-high-contrast=\"yellow\"] {\r\n      background-color: yellow !important;\r\n      color: black !important;\r\n    }\r\n  `;\r\n  \r\n  // Append the style element to the document head\r\n  document.head.appendChild(styleElement);\r\n    // Fix for SVG images that might be getting clipped or hidden\r\n  const svgFix = document.createElement('style');\r\n  svgFix.setAttribute('data-neuro-customizer', 'high-contrast-svg-fix');\r\n  svgFix.textContent = `\r\n    /* Special handling for SVG elements */\r\n    body.neuro-high-contrast-mode svg {\r\n      overflow: visible !important;\r\n    }\r\n    \r\n    /* Fix for images inside containers with overflow:hidden */\r\n    body.neuro-high-contrast-mode img {\r\n      max-width: 100% !important;\r\n      object-fit: contain !important;\r\n    }\r\n    \r\n    /* Fix for background images */\r\n    body.neuro-high-contrast-mode [style*=\"background-image\"] {\r\n      background-size: contain !important;\r\n      background-position: center !important;\r\n    }\r\n    \r\n    /* Prevent filtering or distortion of images */\r\n    body.neuro-high-contrast-mode img,\r\n    body.neuro-high-contrast-mode video,\r\n    body.neuro-high-contrast-mode iframe,\r\n    body.neuro-high-contrast-mode canvas,\r\n    body.neuro-high-contrast-mode [style*=\"background-image\"] {\r\n      filter: none !important;\r\n      -webkit-filter: none !important;\r\n    }\r\n    \r\n    /* Ensure images within components are displayed properly */\r\n    body.neuro-high-contrast-mode img[src],\r\n    body.neuro-high-contrast-mode [style*=\"background-image\"] {\r\n      display: inline-block !important;\r\n      visibility: visible !important;\r\n    }\r\n  `;\r\n  document.head.appendChild(svgFix);\r\n  \r\n  // Add a color scheme toggle button\r\n  const toggleButton = document.createElement('button');\r\n  toggleButton.id = 'neuro-high-contrast-toggle';\r\n  toggleButton.textContent = 'Switch to Yellow/Black';\r\n  toggleButton.setAttribute('aria-label', 'Toggle high contrast color scheme between white on black and black on yellow');\r\n  toggleButton.style.cssText = `\r\n    position: fixed;\r\n    bottom: 20px;\r\n    right: 20px;\r\n    padding: 8px 12px;\r\n    background-color: #333;\r\n    color: white;\r\n    border: 2px solid white;\r\n    border-radius: 4px;\r\n    font-size: 14px;\r\n    z-index: 9999;\r\n    cursor: pointer;\r\n  `;\r\n  \r\n  // Toggle between color schemes\r\n  let isYellowMode = false;\r\n  toggleButton.addEventListener('click', () => {\r\n    isYellowMode = !isYellowMode;\r\n    \r\n    if (isYellowMode) {\r\n      // Apply yellow background / black text\r\n      const yellowMode = document.createElement('style');\r\n      yellowMode.id = 'neuro-high-contrast-yellow-mode';\r\n      yellowMode.setAttribute('data-neuro-customizer', 'high-contrast-yellow');      yellowMode.textContent = `\r\n        body.neuro-high-contrast-mode {\r\n          background-color: yellow !important;\r\n          color: black !important;\r\n        }\r\n        \r\n        body.neuro-high-contrast-mode article,\r\n        body.neuro-high-contrast-mode section,\r\n        body.neuro-high-contrast-mode nav,\r\n        body.neuro-high-contrast-mode aside,\r\n        body.neuro-high-contrast-mode header,\r\n        body.neuro-high-contrast-mode footer,\r\n        body.neuro-high-contrast-mode main {\r\n          background-color: yellow !important;\r\n        }\r\n        \r\n        body.neuro-high-contrast-mode h1,\r\n        body.neuro-high-contrast-mode h2,\r\n        body.neuro-high-contrast-mode h3,\r\n        body.neuro-high-contrast-mode h4,\r\n        body.neuro-high-contrast-mode h5,\r\n        body.neuro-high-contrast-mode h6,\r\n        body.neuro-high-contrast-mode p,\r\n        body.neuro-high-contrast-mode li,\r\n        body.neuro-high-contrast-mode dt,\r\n        body.neuro-high-contrast-mode dd,\r\n        body.neuro-high-contrast-mode label,\r\n        body.neuro-high-contrast-mode figcaption {\r\n          color: black !important;\r\n        }\r\n        \r\n        body.neuro-high-contrast-mode a:link,\r\n        body.neuro-high-contrast-mode a:visited {\r\n          color: blue !important;\r\n        }\r\n        \r\n        body.neuro-high-contrast-mode a:hover,\r\n        body.neuro-high-contrast-mode a:active {\r\n          color: navy !important;\r\n          background-color: #FFFF99 !important;\r\n        }\r\n        \r\n        body.neuro-high-contrast-mode button,\r\n        body.neuro-high-contrast-mode input,\r\n        body.neuro-high-contrast-mode select,\r\n        body.neuro-high-contrast-mode textarea {\r\n          border: 2px solid black !important;\r\n          background-color: yellow !important;\r\n          color: black !important;\r\n        }\r\n        \r\n        body.neuro-high-contrast-mode input:focus,\r\n        body.neuro-high-contrast-mode select:focus,\r\n        body.neuro-high-contrast-mode textarea:focus,\r\n        body.neuro-high-contrast-mode button:focus {\r\n          outline: 3px solid blue !important;\r\n        }\r\n        \r\n        body.neuro-high-contrast-mode th {\r\n          background-color: #FFCC00 !important;\r\n          color: black !important;\r\n        }\r\n        \r\n        /* Fix for potential text readability issues */\r\n        body.neuro-high-contrast-mode [style*=\"color: white\"],\r\n        body.neuro-high-contrast-mode [style*=\"color:#fff\"],\r\n        body.neuro-high-contrast-mode [style*=\"color: #fff\"],\r\n        body.neuro-high-contrast-mode [style*=\"color:#ffffff\"],\r\n        body.neuro-high-contrast-mode [style*=\"color: #ffffff\"] {\r\n          color: black !important;\r\n        }\r\n      `;\r\n      document.head.appendChild(yellowMode);\r\n      toggleButton.textContent = 'Switch to Black/White';\r\n      toggleButton.style.backgroundColor = '#FFCC00';\r\n      toggleButton.style.color = 'black';\r\n      toggleButton.style.borderColor = 'black';\r\n    } else {\r\n      // Remove yellow mode\r\n      const yellowMode = document.getElementById('neuro-high-contrast-yellow-mode');\r\n      if (yellowMode) {\r\n        yellowMode.remove();\r\n      }\r\n      toggleButton.textContent = 'Switch to Yellow/Black';\r\n      toggleButton.style.backgroundColor = '#333';\r\n      toggleButton.style.color = 'white';\r\n      toggleButton.style.borderColor = 'white';\r\n    }\r\n  });\r\n  \r\n  document.body.appendChild(toggleButton);\r\n  \r\n  // Store reference to toggle button to remove later\r\n  if (!window.neuroCustomizerElements) {\r\n    window.neuroCustomizerElements = [];\r\n  }\r\n  window.neuroCustomizerElements.push(toggleButton);\r\n  \r\n  // Add cleanup function to remove toggle button\r\n  if (!window.neuroCustomizerObservers) {\r\n    window.neuroCustomizerObservers = [];\r\n  }\r\n  \r\n  window.neuroCustomizerObservers.push({\r\n    disconnect: () => {\r\n      // Remove toggle button if it exists\r\n      const toggleButton = document.getElementById('neuro-high-contrast-toggle');\r\n      if (toggleButton) {\r\n        toggleButton.remove();\r\n      }\r\n      \r\n      // Remove yellow mode styles if active\r\n      const yellowMode = document.getElementById('neuro-high-contrast-yellow-mode');\r\n      if (yellowMode) {\r\n        yellowMode.remove();\r\n      }\r\n    }\r\n  });\r\n  \r\n  console.log('Improved high contrast mode applied');\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// Content script for Neurodiversity Web Customizer\r\n// This will be injected into web pages to apply the selected visual mode\r\n\r\nimport { applyDyslexiaMode } from './modes/dyslexia';\r\nimport { applyFocusMode } from './modes/focus';\r\nimport { applyHighContrastMode } from './modes/highContrast';\r\nimport { applyCalmMode } from './modes/calm';\r\nimport { resetToDefaultMode } from './modes/default';\r\n\r\n// Check if a mode is already active on this page\r\nlet currentMode = null;\r\n\r\n// Initialize: check if we should apply a saved mode\r\nchrome.runtime.sendMessage({ action: 'getModeStatus' }, (response) => {\r\n  if (response && response.activeMode && response.activeMode !== 'default') {\r\n    applyMode(response.activeMode);\r\n  }\r\n});\r\n\r\n// Listen for messages from popup or background\r\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\r\n  if (request.action === 'applyMode') {\r\n    applyMode(request.mode);\r\n    sendResponse({ success: true });\r\n  }\r\n  return true;\r\n});\r\n\r\n// Function to apply the selected mode\r\nfunction applyMode(mode) {\r\n  // First, remove any existing mode\r\n  if (currentMode) {\r\n    resetToDefaultMode();\r\n  }\r\n  \r\n  // Apply the requested mode\r\n  switch (mode) {\r\n    case 'dyslexia':\r\n      applyDyslexiaMode();\r\n      break;\r\n    case 'focus':\r\n      applyFocusMode();\r\n      break;\r\n    case 'high-contrast':\r\n      applyHighContrastMode();\r\n      break;\r\n    case 'calm':\r\n      applyCalmMode();\r\n      break;\r\n    case 'default':\r\n    default:\r\n      // Already reset above\r\n      break;\r\n  }\r\n  \r\n  // Update current mode\r\n  currentMode = mode === 'default' ? null : mode;\r\n}\r\n"],"names":[],"sourceRoot":""}